
ms2_RFID_SM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000458  000004ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000458  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000021  0080013c  0080013c  00000528  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000528  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000558  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000598  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000100f  00000000  00000000  00000670  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000992  00000000  00000000  0000167f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007f8  00000000  00000000  00002011  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001ec  00000000  00000000  0000280c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005b6  00000000  00000000  000029f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000544  00000000  00000000  00002fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000034f2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	7e c0       	rjmp	.+252    	; 0x132 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 e5       	ldi	r30, 0x58	; 88
  a0:	f4 e0       	ldi	r31, 0x04	; 4
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	ac 33       	cpi	r26, 0x3C	; 60
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	ac e3       	ldi	r26, 0x3C	; 60
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	ad 35       	cpi	r26, 0x5D	; 93
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	a0 d1       	rcall	.+832    	; 0x404 <main>
  c4:	c7 c1       	rjmp	.+910    	; 0x454 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <TimerSet>:
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
}
  c8:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <_avr_timer_M>
  cc:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <_avr_timer_M+0x1>
  d0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_avr_timer_M+0x2>
  d4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_avr_timer_M+0x3>
  d8:	60 93 3c 01 	sts	0x013C, r22	; 0x80013c <__data_end>
  dc:	70 93 3d 01 	sts	0x013D, r23	; 0x80013d <__data_end+0x1>
  e0:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <__data_end+0x2>
  e4:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <__data_end+0x3>
  e8:	08 95       	ret

000000ea <TimerOn>:
  ea:	8b e0       	ldi	r24, 0x0B	; 11
  ec:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
  f0:	8d e7       	ldi	r24, 0x7D	; 125
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
  f8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 102:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 106:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 10a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_avr_timer_M>
 10e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_avr_timer_M+0x1>
 112:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_avr_timer_M+0x2>
 116:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_avr_timer_M+0x3>
 11a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
 11e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 122:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <__data_end+0x2>
 126:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <__data_end+0x3>
 12a:	8f b7       	in	r24, 0x3f	; 63
 12c:	80 68       	ori	r24, 0x80	; 128
 12e:	8f bf       	out	0x3f, r24	; 63
 130:	08 95       	ret

00000132 <__vector_13>:
 132:	1f 92       	push	r1
 134:	0f 92       	push	r0
 136:	0f b6       	in	r0, 0x3f	; 63
 138:	0f 92       	push	r0
 13a:	11 24       	eor	r1, r1
 13c:	8f 93       	push	r24
 13e:	9f 93       	push	r25
 140:	af 93       	push	r26
 142:	bf 93       	push	r27
 144:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 148:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <__data_end+0x1>
 14c:	a0 91 3e 01 	lds	r26, 0x013E	; 0x80013e <__data_end+0x2>
 150:	b0 91 3f 01 	lds	r27, 0x013F	; 0x80013f <__data_end+0x3>
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	a1 09       	sbc	r26, r1
 158:	b1 09       	sbc	r27, r1
 15a:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
 15e:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 162:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <__data_end+0x2>
 166:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <__data_end+0x3>
 16a:	89 2b       	or	r24, r25
 16c:	8a 2b       	or	r24, r26
 16e:	8b 2b       	or	r24, r27
 170:	99 f4       	brne	.+38     	; 0x198 <__vector_13+0x66>
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	80 93 40 01 	sts	0x0140, r24	; 0x800140 <TimerFlag>
 178:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_avr_timer_M>
 17c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_avr_timer_M+0x1>
 180:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_avr_timer_M+0x2>
 184:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_avr_timer_M+0x3>
 188:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
 18c:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <__data_end+0x1>
 190:	a0 93 3e 01 	sts	0x013E, r26	; 0x80013e <__data_end+0x2>
 194:	b0 93 3f 01 	sts	0x013F, r27	; 0x80013f <__data_end+0x3>
 198:	bf 91       	pop	r27
 19a:	af 91       	pop	r26
 19c:	9f 91       	pop	r25
 19e:	8f 91       	pop	r24
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <initUSART>:
 1aa:	81 30       	cpi	r24, 0x01	; 1
 1ac:	81 f0       	breq	.+32     	; 0x1ce <initUSART+0x24>
 1ae:	e1 ec       	ldi	r30, 0xC1	; 193
 1b0:	f0 e0       	ldi	r31, 0x00	; 0
 1b2:	80 81       	ld	r24, Z
 1b4:	88 61       	ori	r24, 0x18	; 24
 1b6:	80 83       	st	Z, r24
 1b8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ba:	f0 e0       	ldi	r31, 0x00	; 0
 1bc:	80 81       	ld	r24, Z
 1be:	86 60       	ori	r24, 0x06	; 6
 1c0:	80 83       	st	Z, r24
 1c2:	83 e3       	ldi	r24, 0x33	; 51
 1c4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1c8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1cc:	08 95       	ret
 1ce:	e9 ec       	ldi	r30, 0xC9	; 201
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	88 61       	ori	r24, 0x18	; 24
 1d6:	80 83       	st	Z, r24
 1d8:	ea ec       	ldi	r30, 0xCA	; 202
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	80 81       	ld	r24, Z
 1de:	86 60       	ori	r24, 0x06	; 6
 1e0:	80 83       	st	Z, r24
 1e2:	87 e0       	ldi	r24, 0x07	; 7
 1e4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1e8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1ec:	08 95       	ret

000001ee <USART_Flush>:
 1ee:	81 30       	cpi	r24, 0x01	; 1
 1f0:	29 f4       	brne	.+10     	; 0x1fc <USART_Flush+0xe>
 1f2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 1f6:	88 23       	and	r24, r24
 1f8:	74 f0       	brlt	.+28     	; 0x216 <USART_Flush+0x28>
 1fa:	08 95       	ret
 1fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 200:	88 23       	and	r24, r24
 202:	8c f4       	brge	.+34     	; 0x226 <USART_Flush+0x38>
 204:	a6 ec       	ldi	r26, 0xC6	; 198
 206:	b0 e0       	ldi	r27, 0x00	; 0
 208:	e0 ec       	ldi	r30, 0xC0	; 192
 20a:	f0 e0       	ldi	r31, 0x00	; 0
 20c:	8c 91       	ld	r24, X
 20e:	80 81       	ld	r24, Z
 210:	88 23       	and	r24, r24
 212:	e4 f3       	brlt	.-8      	; 0x20c <USART_Flush+0x1e>
 214:	08 95       	ret
 216:	ae ec       	ldi	r26, 0xCE	; 206
 218:	b0 e0       	ldi	r27, 0x00	; 0
 21a:	e8 ec       	ldi	r30, 0xC8	; 200
 21c:	f0 e0       	ldi	r31, 0x00	; 0
 21e:	8c 91       	ld	r24, X
 220:	80 81       	ld	r24, Z
 222:	88 23       	and	r24, r24
 224:	e4 f3       	brlt	.-8      	; 0x21e <USART_Flush+0x30>
 226:	08 95       	ret

00000228 <USART_Receive>:
 228:	81 30       	cpi	r24, 0x01	; 1
 22a:	41 f0       	breq	.+16     	; 0x23c <USART_Receive+0x14>
 22c:	e0 ec       	ldi	r30, 0xC0	; 192
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 23       	and	r24, r24
 234:	ec f7       	brge	.-6      	; 0x230 <USART_Receive+0x8>
 236:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 23a:	08 95       	ret
 23c:	e8 ec       	ldi	r30, 0xC8	; 200
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	80 81       	ld	r24, Z
 242:	88 23       	and	r24, r24
 244:	ec f7       	brge	.-6      	; 0x240 <USART_Receive+0x18>
 246:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 24a:	08 95       	ret

0000024c <delay_ms>:
 24c:	18 16       	cp	r1, r24
 24e:	19 06       	cpc	r1, r25
 250:	5c f0       	brlt	.+22     	; 0x268 <delay_ms+0x1c>
 252:	08 95       	ret
 254:	00 00       	nop
 256:	21 50       	subi	r18, 0x01	; 1
 258:	31 09       	sbc	r19, r1
 25a:	e1 f7       	brne	.-8      	; 0x254 <delay_ms+0x8>
 25c:	4f 5f       	subi	r20, 0xFF	; 255
 25e:	5f 4f       	sbci	r21, 0xFF	; 255
 260:	84 17       	cp	r24, r20
 262:	95 07       	cpc	r25, r21
 264:	19 f4       	brne	.+6      	; 0x26c <delay_ms+0x20>
 266:	08 95       	ret
 268:	40 e0       	ldi	r20, 0x00	; 0
 26a:	50 e0       	ldi	r21, 0x00	; 0
 26c:	27 e0       	ldi	r18, 0x07	; 7
 26e:	33 e0       	ldi	r19, 0x03	; 3
 270:	f1 cf       	rjmp	.-30     	; 0x254 <delay_ms+0x8>

00000272 <LCD_WriteCommand>:
 272:	5e 98       	cbi	0x0b, 6	; 11
 274:	88 b9       	out	0x08, r24	; 8
 276:	5f 9a       	sbi	0x0b, 7	; 11
 278:	00 00       	nop
 27a:	5f 98       	cbi	0x0b, 7	; 11
 27c:	82 e0       	ldi	r24, 0x02	; 2
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	e5 cf       	rjmp	.-54     	; 0x24c <delay_ms>
 282:	08 95       	ret

00000284 <LCD_ClearScreen>:
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	f5 cf       	rjmp	.-22     	; 0x272 <LCD_WriteCommand>
 288:	08 95       	ret

0000028a <LCD_init>:
 28a:	84 e6       	ldi	r24, 0x64	; 100
 28c:	90 e0       	ldi	r25, 0x00	; 0
 28e:	de df       	rcall	.-68     	; 0x24c <delay_ms>
 290:	88 e3       	ldi	r24, 0x38	; 56
 292:	ef df       	rcall	.-34     	; 0x272 <LCD_WriteCommand>
 294:	86 e0       	ldi	r24, 0x06	; 6
 296:	ed df       	rcall	.-38     	; 0x272 <LCD_WriteCommand>
 298:	8f e0       	ldi	r24, 0x0F	; 15
 29a:	eb df       	rcall	.-42     	; 0x272 <LCD_WriteCommand>
 29c:	81 e0       	ldi	r24, 0x01	; 1
 29e:	e9 df       	rcall	.-46     	; 0x272 <LCD_WriteCommand>
 2a0:	8a e0       	ldi	r24, 0x0A	; 10
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	d3 cf       	rjmp	.-90     	; 0x24c <delay_ms>
 2a6:	08 95       	ret

000002a8 <LCD_WriteData>:
 2a8:	5e 9a       	sbi	0x0b, 6	; 11
 2aa:	88 b9       	out	0x08, r24	; 8
 2ac:	5f 9a       	sbi	0x0b, 7	; 11
 2ae:	00 00       	nop
 2b0:	5f 98       	cbi	0x0b, 7	; 11
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	ca cf       	rjmp	.-108    	; 0x24c <delay_ms>
 2b8:	08 95       	ret

000002ba <LCD_Cursor>:
 2ba:	81 31       	cpi	r24, 0x11	; 17
 2bc:	18 f4       	brcc	.+6      	; 0x2c4 <LCD_Cursor+0xa>
 2be:	81 58       	subi	r24, 0x81	; 129
 2c0:	d8 cf       	rjmp	.-80     	; 0x272 <LCD_WriteCommand>
 2c2:	08 95       	ret
 2c4:	81 55       	subi	r24, 0x51	; 81
 2c6:	d5 cf       	rjmp	.-86     	; 0x272 <LCD_WriteCommand>
 2c8:	08 95       	ret

000002ca <LCD_DisplayString>:
 2ca:	1f 93       	push	r17
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	fb 01       	movw	r30, r22
 2d2:	90 81       	ld	r25, Z
 2d4:	99 23       	and	r25, r25
 2d6:	51 f0       	breq	.+20     	; 0x2ec <LCD_DisplayString+0x22>
 2d8:	eb 01       	movw	r28, r22
 2da:	11 e0       	ldi	r17, 0x01	; 1
 2dc:	18 0f       	add	r17, r24
 2de:	ed df       	rcall	.-38     	; 0x2ba <LCD_Cursor>
 2e0:	89 91       	ld	r24, Y+
 2e2:	e2 df       	rcall	.-60     	; 0x2a8 <LCD_WriteData>
 2e4:	81 2f       	mov	r24, r17
 2e6:	98 81       	ld	r25, Y
 2e8:	91 11       	cpse	r25, r1
 2ea:	f7 cf       	rjmp	.-18     	; 0x2da <LCD_DisplayString+0x10>
 2ec:	df 91       	pop	r29
 2ee:	cf 91       	pop	r28
 2f0:	1f 91       	pop	r17
 2f2:	08 95       	ret

000002f4 <scan_RFID>:
char outID[11];
char card0[11] = {"0015807557"};
char card1[11] = {"0008731353"};


void scan_RFID() {
 2f4:	cf 92       	push	r12
 2f6:	df 92       	push	r13
 2f8:	ef 92       	push	r14
 2fa:	ff 92       	push	r15
 2fc:	0f 93       	push	r16
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	0f 2e       	mov	r0, r31
 306:	f1 e4       	ldi	r31, 0x41	; 65
 308:	ef 2e       	mov	r14, r31
 30a:	f1 e0       	ldi	r31, 0x01	; 1
 30c:	ff 2e       	mov	r15, r31
 30e:	f0 2d       	mov	r31, r0
 310:	01 e5       	ldi	r16, 0x51	; 81
 312:	11 e0       	ldi	r17, 0x01	; 1
 314:	f7 01       	movw	r30, r14
	for(int i = 0; i < 16; i++) {
		RFID[i] = 0;
 316:	11 92       	st	Z+, r1
char card0[11] = {"0015807557"};
char card1[11] = {"0008731353"};


void scan_RFID() {
	for(int i = 0; i < 16; i++) {
 318:	e0 17       	cp	r30, r16
 31a:	f1 07       	cpc	r31, r17
 31c:	e1 f7       	brne	.-8      	; 0x316 <scan_RFID+0x22>
 31e:	0f 2e       	mov	r0, r31
 320:	f1 e5       	ldi	r31, 0x51	; 81
 322:	cf 2e       	mov	r12, r31
 324:	f1 e0       	ldi	r31, 0x01	; 1
 326:	df 2e       	mov	r13, r31
 328:	f0 2d       	mov	r31, r0
 32a:	8b e5       	ldi	r24, 0x5B	; 91
 32c:	91 e0       	ldi	r25, 0x01	; 1
 32e:	f6 01       	movw	r30, r12
		RFID[i] = 0;
	}
	
	for(int i = 0; i < 10; i++) {
		outID[i] = 0;
 330:	11 92       	st	Z+, r1
void scan_RFID() {
	for(int i = 0; i < 16; i++) {
		RFID[i] = 0;
	}
	
	for(int i = 0; i < 10; i++) {
 332:	8e 17       	cp	r24, r30
 334:	9f 07       	cpc	r25, r31
 336:	e1 f7       	brne	.-8      	; 0x330 <scan_RFID+0x3c>
		outID[i] = 0;
	}
	
	USART_Flush(0);
 338:	80 e0       	ldi	r24, 0x00	; 0
 33a:	59 df       	rcall	.-334    	; 0x1ee <USART_Flush>
 33c:	c1 e4       	ldi	r28, 0x41	; 65
 33e:	d1 e0       	ldi	r29, 0x01	; 1
	// RFID scanner
	for (int i = 0; i < 16; i++) {
		RFID[i] = USART_Receive(0);
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	72 df       	rcall	.-284    	; 0x228 <USART_Receive>
 344:	89 93       	st	Y+, r24
		outID[i] = 0;
	}
	
	USART_Flush(0);
	// RFID scanner
	for (int i = 0; i < 16; i++) {
 346:	c0 17       	cp	r28, r16
 348:	d1 07       	cpc	r29, r17
 34a:	d1 f7       	brne	.-12     	; 0x340 <scan_RFID+0x4c>
 34c:	2b e4       	ldi	r18, 0x4B	; 75
 34e:	31 e0       	ldi	r19, 0x01	; 1
		RFID[i] = USART_Receive(0);
	}
	
	for (int i = 0; i < 10; i++) {
		outID[i] = RFID[i];
 350:	f7 01       	movw	r30, r14
 352:	81 91       	ld	r24, Z+
 354:	7f 01       	movw	r14, r30
 356:	f6 01       	movw	r30, r12
 358:	81 93       	st	Z+, r24
 35a:	6f 01       	movw	r12, r30
	// RFID scanner
	for (int i = 0; i < 16; i++) {
		RFID[i] = USART_Receive(0);
	}
	
	for (int i = 0; i < 10; i++) {
 35c:	2e 15       	cp	r18, r14
 35e:	3f 05       	cpc	r19, r15
 360:	b9 f7       	brne	.-18     	; 0x350 <scan_RFID+0x5c>
		outID[i] = RFID[i];
	}
	
	LCD_DisplayString(17, outID);
 362:	61 e5       	ldi	r22, 0x51	; 81
 364:	71 e0       	ldi	r23, 0x01	; 1
 366:	81 e1       	ldi	r24, 0x11	; 17
 368:	b0 df       	rcall	.-160    	; 0x2ca <LCD_DisplayString>
}
 36a:	df 91       	pop	r29
 36c:	cf 91       	pop	r28
 36e:	1f 91       	pop	r17
 370:	0f 91       	pop	r16
 372:	ff 90       	pop	r15
 374:	ef 90       	pop	r14
 376:	df 90       	pop	r13
 378:	cf 90       	pop	r12
 37a:	08 95       	ret

0000037c <rfid>:

enum States1 {init1, wait, scanRFID, nextState} state1;
	
void rfid() {
	switch(state1) {
 37c:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <state1>
 380:	81 30       	cpi	r24, 0x01	; 1
 382:	51 f0       	breq	.+20     	; 0x398 <rfid+0x1c>
 384:	28 f0       	brcs	.+10     	; 0x390 <rfid+0x14>
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	69 f0       	breq	.+26     	; 0x3a4 <rfid+0x28>
 38a:	83 30       	cpi	r24, 0x03	; 3
 38c:	31 f1       	breq	.+76     	; 0x3da <rfid+0x5e>
 38e:	29 c0       	rjmp	.+82     	; 0x3e2 <rfid+0x66>
		case init1:
			state1 = wait;
 390:	81 e0       	ldi	r24, 0x01	; 1
 392:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <state1>
			break;
 396:	29 c0       	rjmp	.+82     	; 0x3ea <rfid+0x6e>
		case wait:
			if(GetBit(PINA, 1) == 0) {
 398:	01 99       	sbic	0x00, 1	; 0
 39a:	27 c0       	rjmp	.+78     	; 0x3ea <rfid+0x6e>
				state1 = scanRFID;
 39c:	82 e0       	ldi	r24, 0x02	; 2
 39e:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <state1>
 3a2:	2a c0       	rjmp	.+84     	; 0x3f8 <rfid+0x7c>
			else {
				state1 = wait;
			}
			break;
		case scanRFID:
			if(strcmp(outID, card0) == 0 || strcmp(outID, card1) == 0 ) {
 3a4:	6b e0       	ldi	r22, 0x0B	; 11
 3a6:	71 e0       	ldi	r23, 0x01	; 1
 3a8:	81 e5       	ldi	r24, 0x51	; 81
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	4a d0       	rcall	.+148    	; 0x442 <strcmp>
 3ae:	89 2b       	or	r24, r25
 3b0:	39 f0       	breq	.+14     	; 0x3c0 <rfid+0x44>
 3b2:	60 e0       	ldi	r22, 0x00	; 0
 3b4:	71 e0       	ldi	r23, 0x01	; 1
 3b6:	81 e5       	ldi	r24, 0x51	; 81
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	43 d0       	rcall	.+134    	; 0x442 <strcmp>
 3bc:	89 2b       	or	r24, r25
 3be:	e1 f4       	brne	.+56     	; 0x3f8 <rfid+0x7c>
				state1 = nextState;
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <state1>
			LCD_DisplayString(1, "Scan Card Twice");
			scan_RFID();
			//delay_ms(1000);
			break;
		case nextState:
			LCD_ClearScreen();
 3c6:	5e df       	rcall	.-324    	; 0x284 <LCD_ClearScreen>
			LCD_DisplayString(1, "Next Step");
 3c8:	6a e1       	ldi	r22, 0x1A	; 26
 3ca:	71 e0       	ldi	r23, 0x01	; 1
 3cc:	81 e0       	ldi	r24, 0x01	; 1
 3ce:	7d df       	rcall	.-262    	; 0x2ca <LCD_DisplayString>
			PORTB |= (1 << PB1);
 3d0:	29 9a       	sbi	0x05, 1	; 5
			delay_ms(5000);
 3d2:	88 e8       	ldi	r24, 0x88	; 136
 3d4:	93 e1       	ldi	r25, 0x13	; 19
 3d6:	3a cf       	rjmp	.-396    	; 0x24c <delay_ms>
 3d8:	08 95       	ret
			break;
 3da:	81 e0       	ldi	r24, 0x01	; 1
			else {
				state1 = scanRFID;
			}
			break;
		case nextState:
			state1 = wait;
 3dc:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <state1>
 3e0:	04 c0       	rjmp	.+8      	; 0x3ea <rfid+0x6e>
			break;
 3e2:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <state1>
			break;
	}
	
	switch(state1) {
		case init1:
			PORTB &= ~(1 << PB1);
 3e6:	29 98       	cbi	0x05, 1	; 5
			delay_ms(5000);
			break;
		default:
			break;
	}
}
 3e8:	08 95       	ret
		case init1:
			PORTB &= ~(1 << PB1);
			break;
		case wait:
			PORTB &= ~(1 << PB1);
			LCD_ClearScreen();
 3ea:	29 98       	cbi	0x05, 1	; 5
 3ec:	4b df       	rcall	.-362    	; 0x284 <LCD_ClearScreen>
			LCD_DisplayString(1, "Waiting");
 3ee:	64 e2       	ldi	r22, 0x24	; 36
 3f0:	71 e0       	ldi	r23, 0x01	; 1
 3f2:	81 e0       	ldi	r24, 0x01	; 1
			//delay_ms(100);
			break;
 3f4:	6a cf       	rjmp	.-300    	; 0x2ca <LCD_DisplayString>
		case scanRFID:
			LCD_DisplayString(1, "Scan Card Twice");
 3f6:	08 95       	ret
 3f8:	6c e2       	ldi	r22, 0x2C	; 44
 3fa:	71 e0       	ldi	r23, 0x01	; 1
 3fc:	81 e0       	ldi	r24, 0x01	; 1
 3fe:	65 df       	rcall	.-310    	; 0x2ca <LCD_DisplayString>
			scan_RFID();
 400:	79 cf       	rjmp	.-270    	; 0x2f4 <scan_RFID>
 402:	08 95       	ret

00000404 <main>:
 404:	11 b8       	out	0x01, r1	; 1
}

int main(void)
{
	
	DDRA = 0x00;	PORTA = 0xFE;
 406:	8e ef       	ldi	r24, 0xFE	; 254
 408:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF;	PORTB = 0x00;
 40a:	9f ef       	ldi	r25, 0xFF	; 255
 40c:	94 b9       	out	0x04, r25	; 4
 40e:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 410:	97 b9       	out	0x07, r25	; 7
 412:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFE;	PORTD = 0x01;
 414:	8a b9       	out	0x0a, r24	; 10
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	8b b9       	out	0x0b, r24	; 11
	
	TimerSet(50);
 41a:	62 e3       	ldi	r22, 0x32	; 50
 41c:	70 e0       	ldi	r23, 0x00	; 0
 41e:	80 e0       	ldi	r24, 0x00	; 0
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	52 de       	rcall	.-860    	; 0xc8 <TimerSet>
	TimerOn();
 424:	62 de       	rcall	.-828    	; 0xea <TimerOn>
 426:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <state1>
	
	state1 = init1;
	
	LCD_init();
 42a:	2f df       	rcall	.-418    	; 0x28a <LCD_init>
	LCD_ClearScreen();
 42c:	2b df       	rcall	.-426    	; 0x284 <LCD_ClearScreen>
	initUSART(0);
 42e:	80 e0       	ldi	r24, 0x00	; 0
 430:	bc de       	rcall	.-648    	; 0x1aa <initUSART>
 432:	a4 df       	rcall	.-184    	; 0x37c <rfid>
		//}
		//if(lock == 1) {
			// Fingerprint scanner
			//alarm();
			//_delay_ms(1000);
			rfid();
 434:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <TimerFlag>
		//delay_ms(1000);
		//LCD_ClearScreen();
		
		
		
		while (!TimerFlag){}
 438:	88 23       	and	r24, r24
 43a:	e1 f3       	breq	.-8      	; 0x434 <main+0x30>
 43c:	10 92 40 01 	sts	0x0140, r1	; 0x800140 <TimerFlag>
		TimerFlag = 0;
 440:	f8 cf       	rjmp	.-16     	; 0x432 <main+0x2e>

00000442 <strcmp>:
 442:	fb 01       	movw	r30, r22
    }
 444:	dc 01       	movw	r26, r24
 446:	8d 91       	ld	r24, X+
 448:	01 90       	ld	r0, Z+
 44a:	80 19       	sub	r24, r0
 44c:	01 10       	cpse	r0, r1
 44e:	d9 f3       	breq	.-10     	; 0x446 <strcmp+0x4>
 450:	99 0b       	sbc	r25, r25
 452:	08 95       	ret

00000454 <_exit>:
 454:	f8 94       	cli

00000456 <__stop_program>:
 456:	ff cf       	rjmp	.-2      	; 0x456 <__stop_program>
