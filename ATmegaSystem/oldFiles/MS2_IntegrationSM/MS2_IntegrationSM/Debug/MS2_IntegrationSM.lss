
MS2_IntegrationSM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000e4  00800100  000008fa  0000098e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000008fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000022  008001e4  008001e4  00000a72  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a72  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000aa4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  00000ae4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e25  00000000  00000000  00000be4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009bb  00000000  00000000  00002a09  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d1f  00000000  00000000  000033c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000298  00000000  00000000  000040e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000653  00000000  00000000  0000437c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000974  00000000  00000000  000049cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005343  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c0       	rjmp	.+154    	; 0x9c <__ctors_end>
   2:	00 00       	nop
   4:	68 c0       	rjmp	.+208    	; 0xd6 <__bad_interrupt>
   6:	00 00       	nop
   8:	66 c0       	rjmp	.+204    	; 0xd6 <__bad_interrupt>
   a:	00 00       	nop
   c:	64 c0       	rjmp	.+200    	; 0xd6 <__bad_interrupt>
   e:	00 00       	nop
  10:	62 c0       	rjmp	.+196    	; 0xd6 <__bad_interrupt>
  12:	00 00       	nop
  14:	60 c0       	rjmp	.+192    	; 0xd6 <__bad_interrupt>
  16:	00 00       	nop
  18:	5e c0       	rjmp	.+188    	; 0xd6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5c c0       	rjmp	.+184    	; 0xd6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	5a c0       	rjmp	.+180    	; 0xd6 <__bad_interrupt>
  22:	00 00       	nop
  24:	58 c0       	rjmp	.+176    	; 0xd6 <__bad_interrupt>
  26:	00 00       	nop
  28:	56 c0       	rjmp	.+172    	; 0xd6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	54 c0       	rjmp	.+168    	; 0xd6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	52 c0       	rjmp	.+164    	; 0xd6 <__bad_interrupt>
  32:	00 00       	nop
  34:	86 c0       	rjmp	.+268    	; 0x142 <__vector_13>
  36:	00 00       	nop
  38:	4e c0       	rjmp	.+156    	; 0xd6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4c c0       	rjmp	.+152    	; 0xd6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	4a c0       	rjmp	.+148    	; 0xd6 <__bad_interrupt>
  42:	00 00       	nop
  44:	48 c0       	rjmp	.+144    	; 0xd6 <__bad_interrupt>
  46:	00 00       	nop
  48:	46 c0       	rjmp	.+140    	; 0xd6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	44 c0       	rjmp	.+136    	; 0xd6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	42 c0       	rjmp	.+132    	; 0xd6 <__bad_interrupt>
  52:	00 00       	nop
  54:	40 c0       	rjmp	.+128    	; 0xd6 <__bad_interrupt>
  56:	00 00       	nop
  58:	3e c0       	rjmp	.+124    	; 0xd6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3c c0       	rjmp	.+120    	; 0xd6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	3a c0       	rjmp	.+116    	; 0xd6 <__bad_interrupt>
  62:	00 00       	nop
  64:	38 c0       	rjmp	.+112    	; 0xd6 <__bad_interrupt>
  66:	00 00       	nop
  68:	36 c0       	rjmp	.+108    	; 0xd6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	34 c0       	rjmp	.+104    	; 0xd6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	32 c0       	rjmp	.+100    	; 0xd6 <__bad_interrupt>
  72:	00 00       	nop
  74:	30 c0       	rjmp	.+96     	; 0xd6 <__bad_interrupt>
  76:	00 00       	nop
  78:	2e c0       	rjmp	.+92     	; 0xd6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2c c0       	rjmp	.+88     	; 0xd6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	2a c0       	rjmp	.+84     	; 0xd6 <__bad_interrupt>
  82:	00 00       	nop
  84:	28 c0       	rjmp	.+80     	; 0xd6 <__bad_interrupt>
  86:	00 00       	nop
  88:	26 c0       	rjmp	.+76     	; 0xd6 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	c8 03       	fmulsu	r20, r16
  8e:	cc 03       	fmulsu	r20, r20
  90:	d2 03       	fmuls	r21, r18
  92:	ee 03       	fmulsu	r22, r22
  94:	f6 03       	fmuls	r23, r22
  96:	fe 03       	fmulsu	r23, r22
  98:	06 04       	cpc	r0, r6
  9a:	0e 04       	cpc	r0, r14

0000009c <__ctors_end>:
  9c:	11 24       	eor	r1, r1
  9e:	1f be       	out	0x3f, r1	; 63
  a0:	cf ef       	ldi	r28, 0xFF	; 255
  a2:	d0 e4       	ldi	r29, 0x40	; 64
  a4:	de bf       	out	0x3e, r29	; 62
  a6:	cd bf       	out	0x3d, r28	; 61

000000a8 <__do_copy_data>:
  a8:	11 e0       	ldi	r17, 0x01	; 1
  aa:	a0 e0       	ldi	r26, 0x00	; 0
  ac:	b1 e0       	ldi	r27, 0x01	; 1
  ae:	ea ef       	ldi	r30, 0xFA	; 250
  b0:	f8 e0       	ldi	r31, 0x08	; 8
  b2:	00 e0       	ldi	r16, 0x00	; 0
  b4:	0b bf       	out	0x3b, r16	; 59
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x14>
  b8:	07 90       	elpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	a4 3e       	cpi	r26, 0xE4	; 228
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0x10>

000000c2 <__do_clear_bss>:
  c2:	22 e0       	ldi	r18, 0x02	; 2
  c4:	a4 ee       	ldi	r26, 0xE4	; 228
  c6:	b1 e0       	ldi	r27, 0x01	; 1
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	a6 30       	cpi	r26, 0x06	; 6
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	db d3       	rcall	.+1974   	; 0x88a <main>
  d4:	10 c4       	rjmp	.+2080   	; 0x8f6 <_exit>

000000d6 <__bad_interrupt>:
  d6:	94 cf       	rjmp	.-216    	; 0x0 <__vectors>

000000d8 <TimerSet>:
//Parameter: Takes in a uChar for a PINx and the pin number
//Returns: The value of the PINx
unsigned char GetBit(unsigned char port, unsigned char number) 
{
	return ( port & (0x01 << number) );
}
  d8:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <_avr_timer_M>
  dc:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <_avr_timer_M+0x1>
  e0:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_avr_timer_M+0x2>
  e4:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_avr_timer_M+0x3>
  e8:	60 93 e4 01 	sts	0x01E4, r22	; 0x8001e4 <__data_end>
  ec:	70 93 e5 01 	sts	0x01E5, r23	; 0x8001e5 <__data_end+0x1>
  f0:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <__data_end+0x2>
  f4:	90 93 e7 01 	sts	0x01E7, r25	; 0x8001e7 <__data_end+0x3>
  f8:	08 95       	ret

000000fa <TimerOn>:
  fa:	8b e0       	ldi	r24, 0x0B	; 11
  fc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 100:	8d e7       	ldi	r24, 0x7D	; 125
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 108:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 112:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 116:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 11a:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_avr_timer_M>
 11e:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_avr_timer_M+0x1>
 122:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_avr_timer_M+0x2>
 126:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_avr_timer_M+0x3>
 12a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
 12e:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <__data_end+0x1>
 132:	a0 93 e6 01 	sts	0x01E6, r26	; 0x8001e6 <__data_end+0x2>
 136:	b0 93 e7 01 	sts	0x01E7, r27	; 0x8001e7 <__data_end+0x3>
 13a:	8f b7       	in	r24, 0x3f	; 63
 13c:	80 68       	ori	r24, 0x80	; 128
 13e:	8f bf       	out	0x3f, r24	; 63
 140:	08 95       	ret

00000142 <__vector_13>:
 142:	1f 92       	push	r1
 144:	0f 92       	push	r0
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	0f 92       	push	r0
 14a:	11 24       	eor	r1, r1
 14c:	8f 93       	push	r24
 14e:	9f 93       	push	r25
 150:	af 93       	push	r26
 152:	bf 93       	push	r27
 154:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <__data_end>
 158:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <__data_end+0x1>
 15c:	a0 91 e6 01 	lds	r26, 0x01E6	; 0x8001e6 <__data_end+0x2>
 160:	b0 91 e7 01 	lds	r27, 0x01E7	; 0x8001e7 <__data_end+0x3>
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	a1 09       	sbc	r26, r1
 168:	b1 09       	sbc	r27, r1
 16a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
 16e:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <__data_end+0x1>
 172:	a0 93 e6 01 	sts	0x01E6, r26	; 0x8001e6 <__data_end+0x2>
 176:	b0 93 e7 01 	sts	0x01E7, r27	; 0x8001e7 <__data_end+0x3>
 17a:	89 2b       	or	r24, r25
 17c:	8a 2b       	or	r24, r26
 17e:	8b 2b       	or	r24, r27
 180:	99 f4       	brne	.+38     	; 0x1a8 <__vector_13+0x66>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <TimerFlag>
 188:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_avr_timer_M>
 18c:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_avr_timer_M+0x1>
 190:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_avr_timer_M+0x2>
 194:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_avr_timer_M+0x3>
 198:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <__data_end>
 19c:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <__data_end+0x1>
 1a0:	a0 93 e6 01 	sts	0x01E6, r26	; 0x8001e6 <__data_end+0x2>
 1a4:	b0 93 e7 01 	sts	0x01E7, r27	; 0x8001e7 <__data_end+0x3>
 1a8:	bf 91       	pop	r27
 1aa:	af 91       	pop	r26
 1ac:	9f 91       	pop	r25
 1ae:	8f 91       	pop	r24
 1b0:	0f 90       	pop	r0
 1b2:	0f be       	out	0x3f, r0	; 63
 1b4:	0f 90       	pop	r0
 1b6:	1f 90       	pop	r1
 1b8:	18 95       	reti

000001ba <initUSART>:
 1ba:	81 30       	cpi	r24, 0x01	; 1
 1bc:	81 f0       	breq	.+32     	; 0x1de <initUSART+0x24>
 1be:	e1 ec       	ldi	r30, 0xC1	; 193
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	88 61       	ori	r24, 0x18	; 24
 1c6:	80 83       	st	Z, r24
 1c8:	e2 ec       	ldi	r30, 0xC2	; 194
 1ca:	f0 e0       	ldi	r31, 0x00	; 0
 1cc:	80 81       	ld	r24, Z
 1ce:	86 60       	ori	r24, 0x06	; 6
 1d0:	80 83       	st	Z, r24
 1d2:	83 e3       	ldi	r24, 0x33	; 51
 1d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1d8:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1dc:	08 95       	ret
 1de:	e9 ec       	ldi	r30, 0xC9	; 201
 1e0:	f0 e0       	ldi	r31, 0x00	; 0
 1e2:	80 81       	ld	r24, Z
 1e4:	88 61       	ori	r24, 0x18	; 24
 1e6:	80 83       	st	Z, r24
 1e8:	ea ec       	ldi	r30, 0xCA	; 202
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	80 81       	ld	r24, Z
 1ee:	86 60       	ori	r24, 0x06	; 6
 1f0:	80 83       	st	Z, r24
 1f2:	87 e0       	ldi	r24, 0x07	; 7
 1f4:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1f8:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 1fc:	08 95       	ret

000001fe <USART_Flush>:
 1fe:	81 30       	cpi	r24, 0x01	; 1
 200:	29 f4       	brne	.+10     	; 0x20c <USART_Flush+0xe>
 202:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 206:	88 23       	and	r24, r24
 208:	74 f0       	brlt	.+28     	; 0x226 <USART_Flush+0x28>
 20a:	08 95       	ret
 20c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 210:	88 23       	and	r24, r24
 212:	8c f4       	brge	.+34     	; 0x236 <USART_Flush+0x38>
 214:	a6 ec       	ldi	r26, 0xC6	; 198
 216:	b0 e0       	ldi	r27, 0x00	; 0
 218:	e0 ec       	ldi	r30, 0xC0	; 192
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	8c 91       	ld	r24, X
 21e:	80 81       	ld	r24, Z
 220:	88 23       	and	r24, r24
 222:	e4 f3       	brlt	.-8      	; 0x21c <USART_Flush+0x1e>
 224:	08 95       	ret
 226:	ae ec       	ldi	r26, 0xCE	; 206
 228:	b0 e0       	ldi	r27, 0x00	; 0
 22a:	e8 ec       	ldi	r30, 0xC8	; 200
 22c:	f0 e0       	ldi	r31, 0x00	; 0
 22e:	8c 91       	ld	r24, X
 230:	80 81       	ld	r24, Z
 232:	88 23       	and	r24, r24
 234:	e4 f3       	brlt	.-8      	; 0x22e <USART_Flush+0x30>
 236:	08 95       	ret

00000238 <USART_Send>:
 238:	61 30       	cpi	r22, 0x01	; 1
 23a:	41 f0       	breq	.+16     	; 0x24c <USART_Send+0x14>
 23c:	e0 ec       	ldi	r30, 0xC0	; 192
 23e:	f0 e0       	ldi	r31, 0x00	; 0
 240:	90 81       	ld	r25, Z
 242:	95 ff       	sbrs	r25, 5
 244:	fd cf       	rjmp	.-6      	; 0x240 <USART_Send+0x8>
 246:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 24a:	08 95       	ret
 24c:	e8 ec       	ldi	r30, 0xC8	; 200
 24e:	f0 e0       	ldi	r31, 0x00	; 0
 250:	90 81       	ld	r25, Z
 252:	95 ff       	sbrs	r25, 5
 254:	fd cf       	rjmp	.-6      	; 0x250 <USART_Send+0x18>
 256:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 25a:	08 95       	ret

0000025c <USART_Receive>:
 25c:	81 30       	cpi	r24, 0x01	; 1
 25e:	41 f0       	breq	.+16     	; 0x270 <USART_Receive+0x14>
 260:	e0 ec       	ldi	r30, 0xC0	; 192
 262:	f0 e0       	ldi	r31, 0x00	; 0
 264:	80 81       	ld	r24, Z
 266:	88 23       	and	r24, r24
 268:	ec f7       	brge	.-6      	; 0x264 <USART_Receive+0x8>
 26a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 26e:	08 95       	ret
 270:	e8 ec       	ldi	r30, 0xC8	; 200
 272:	f0 e0       	ldi	r31, 0x00	; 0
 274:	80 81       	ld	r24, Z
 276:	88 23       	and	r24, r24
 278:	ec f7       	brge	.-6      	; 0x274 <USART_Receive+0x18>
 27a:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 27e:	08 95       	ret

00000280 <delay_ms>:
 280:	18 16       	cp	r1, r24
 282:	19 06       	cpc	r1, r25
 284:	5c f0       	brlt	.+22     	; 0x29c <delay_ms+0x1c>
 286:	08 95       	ret
 288:	00 00       	nop
 28a:	21 50       	subi	r18, 0x01	; 1
 28c:	31 09       	sbc	r19, r1
 28e:	e1 f7       	brne	.-8      	; 0x288 <delay_ms+0x8>
 290:	4f 5f       	subi	r20, 0xFF	; 255
 292:	5f 4f       	sbci	r21, 0xFF	; 255
 294:	84 17       	cp	r24, r20
 296:	95 07       	cpc	r25, r21
 298:	19 f4       	brne	.+6      	; 0x2a0 <delay_ms+0x20>
 29a:	08 95       	ret
 29c:	40 e0       	ldi	r20, 0x00	; 0
 29e:	50 e0       	ldi	r21, 0x00	; 0
 2a0:	27 e0       	ldi	r18, 0x07	; 7
 2a2:	33 e0       	ldi	r19, 0x03	; 3
 2a4:	f1 cf       	rjmp	.-30     	; 0x288 <delay_ms+0x8>

000002a6 <LCD_WriteCommand>:
 2a6:	5e 98       	cbi	0x0b, 6	; 11
 2a8:	88 b9       	out	0x08, r24	; 8
 2aa:	5f 9a       	sbi	0x0b, 7	; 11
 2ac:	00 00       	nop
 2ae:	5f 98       	cbi	0x0b, 7	; 11
 2b0:	82 e0       	ldi	r24, 0x02	; 2
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	e5 cf       	rjmp	.-54     	; 0x280 <delay_ms>
 2b6:	08 95       	ret

000002b8 <LCD_ClearScreen>:
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	f5 cf       	rjmp	.-22     	; 0x2a6 <LCD_WriteCommand>
 2bc:	08 95       	ret

000002be <LCD_init>:
 2be:	84 e6       	ldi	r24, 0x64	; 100
 2c0:	90 e0       	ldi	r25, 0x00	; 0
 2c2:	de df       	rcall	.-68     	; 0x280 <delay_ms>
 2c4:	88 e3       	ldi	r24, 0x38	; 56
 2c6:	ef df       	rcall	.-34     	; 0x2a6 <LCD_WriteCommand>
 2c8:	86 e0       	ldi	r24, 0x06	; 6
 2ca:	ed df       	rcall	.-38     	; 0x2a6 <LCD_WriteCommand>
 2cc:	8f e0       	ldi	r24, 0x0F	; 15
 2ce:	eb df       	rcall	.-42     	; 0x2a6 <LCD_WriteCommand>
 2d0:	81 e0       	ldi	r24, 0x01	; 1
 2d2:	e9 df       	rcall	.-46     	; 0x2a6 <LCD_WriteCommand>
 2d4:	8a e0       	ldi	r24, 0x0A	; 10
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	d3 cf       	rjmp	.-90     	; 0x280 <delay_ms>
 2da:	08 95       	ret

000002dc <LCD_WriteData>:
 2dc:	5e 9a       	sbi	0x0b, 6	; 11
 2de:	88 b9       	out	0x08, r24	; 8
 2e0:	5f 9a       	sbi	0x0b, 7	; 11
 2e2:	00 00       	nop
 2e4:	5f 98       	cbi	0x0b, 7	; 11
 2e6:	81 e0       	ldi	r24, 0x01	; 1
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	ca cf       	rjmp	.-108    	; 0x280 <delay_ms>
 2ec:	08 95       	ret

000002ee <LCD_Cursor>:
 2ee:	81 31       	cpi	r24, 0x11	; 17
 2f0:	18 f4       	brcc	.+6      	; 0x2f8 <LCD_Cursor+0xa>
 2f2:	81 58       	subi	r24, 0x81	; 129
 2f4:	d8 cf       	rjmp	.-80     	; 0x2a6 <LCD_WriteCommand>
 2f6:	08 95       	ret
 2f8:	81 55       	subi	r24, 0x51	; 81
 2fa:	d5 cf       	rjmp	.-86     	; 0x2a6 <LCD_WriteCommand>
 2fc:	08 95       	ret

000002fe <LCD_DisplayString>:
 2fe:	1f 93       	push	r17
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	fb 01       	movw	r30, r22
 306:	90 81       	ld	r25, Z
 308:	99 23       	and	r25, r25
 30a:	51 f0       	breq	.+20     	; 0x320 <LCD_DisplayString+0x22>
 30c:	eb 01       	movw	r28, r22
 30e:	11 e0       	ldi	r17, 0x01	; 1
 310:	18 0f       	add	r17, r24
 312:	ed df       	rcall	.-38     	; 0x2ee <LCD_Cursor>
 314:	89 91       	ld	r24, Y+
 316:	e2 df       	rcall	.-60     	; 0x2dc <LCD_WriteData>
 318:	81 2f       	mov	r24, r17
 31a:	98 81       	ld	r25, Y
 31c:	91 11       	cpse	r25, r1
 31e:	f7 cf       	rjmp	.-18     	; 0x30e <LCD_DisplayString+0x10>
 320:	df 91       	pop	r29
 322:	cf 91       	pop	r28
 324:	1f 91       	pop	r17
 326:	08 95       	ret

00000328 <scan_RFID>:
char outID[11];
char card0[11] = {"0015807557"};
char card1[11] = {"0008731353"};


void scan_RFID() {
 328:	cf 92       	push	r12
 32a:	df 92       	push	r13
 32c:	ef 92       	push	r14
 32e:	ff 92       	push	r15
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	0f 2e       	mov	r0, r31
 33a:	f9 ee       	ldi	r31, 0xE9	; 233
 33c:	ef 2e       	mov	r14, r31
 33e:	f1 e0       	ldi	r31, 0x01	; 1
 340:	ff 2e       	mov	r15, r31
 342:	f0 2d       	mov	r31, r0
 344:	09 ef       	ldi	r16, 0xF9	; 249
 346:	11 e0       	ldi	r17, 0x01	; 1
 348:	f7 01       	movw	r30, r14
	for(int i = 0; i < 16; i++) {
		RFID[i] = 0;
 34a:	11 92       	st	Z+, r1
char card0[11] = {"0015807557"};
char card1[11] = {"0008731353"};


void scan_RFID() {
	for(int i = 0; i < 16; i++) {
 34c:	e0 17       	cp	r30, r16
 34e:	f1 07       	cpc	r31, r17
 350:	e1 f7       	brne	.-8      	; 0x34a <scan_RFID+0x22>
 352:	0f 2e       	mov	r0, r31
 354:	f9 ef       	ldi	r31, 0xF9	; 249
 356:	cf 2e       	mov	r12, r31
 358:	f1 e0       	ldi	r31, 0x01	; 1
 35a:	df 2e       	mov	r13, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	83 e0       	ldi	r24, 0x03	; 3
 360:	92 e0       	ldi	r25, 0x02	; 2
 362:	f6 01       	movw	r30, r12
		RFID[i] = 0;
	}
	
	for(int i = 0; i < 10; i++) {
		outID[i] = 0;
 364:	11 92       	st	Z+, r1
void scan_RFID() {
	for(int i = 0; i < 16; i++) {
		RFID[i] = 0;
	}
	
	for(int i = 0; i < 10; i++) {
 366:	8e 17       	cp	r24, r30
 368:	9f 07       	cpc	r25, r31
 36a:	e1 f7       	brne	.-8      	; 0x364 <scan_RFID+0x3c>
		outID[i] = 0;
	}
	
	USART_Flush(0);
 36c:	80 e0       	ldi	r24, 0x00	; 0
 36e:	47 df       	rcall	.-370    	; 0x1fe <USART_Flush>
 370:	c9 ee       	ldi	r28, 0xE9	; 233
 372:	d1 e0       	ldi	r29, 0x01	; 1
	// RFID scanner
	for (int i = 0; i < 16; i++) {
		RFID[i] = USART_Receive(0);
 374:	80 e0       	ldi	r24, 0x00	; 0
 376:	72 df       	rcall	.-284    	; 0x25c <USART_Receive>
 378:	89 93       	st	Y+, r24
		outID[i] = 0;
	}
	
	USART_Flush(0);
	// RFID scanner
	for (int i = 0; i < 16; i++) {
 37a:	c0 17       	cp	r28, r16
 37c:	d1 07       	cpc	r29, r17
 37e:	d1 f7       	brne	.-12     	; 0x374 <scan_RFID+0x4c>
 380:	23 ef       	ldi	r18, 0xF3	; 243
 382:	31 e0       	ldi	r19, 0x01	; 1
		RFID[i] = USART_Receive(0);
	}
	
	for (int i = 0; i < 10; i++) {
		outID[i] = RFID[i];
 384:	f7 01       	movw	r30, r14
 386:	81 91       	ld	r24, Z+
 388:	7f 01       	movw	r14, r30
 38a:	f6 01       	movw	r30, r12
 38c:	81 93       	st	Z+, r24
 38e:	6f 01       	movw	r12, r30
	// RFID scanner
	for (int i = 0; i < 16; i++) {
		RFID[i] = USART_Receive(0);
	}
	
	for (int i = 0; i < 10; i++) {
 390:	2e 15       	cp	r18, r14
 392:	3f 05       	cpc	r19, r15
 394:	b9 f7       	brne	.-18     	; 0x384 <scan_RFID+0x5c>
		outID[i] = RFID[i];
	}
	
	LCD_DisplayString(17, outID);
 396:	69 ef       	ldi	r22, 0xF9	; 249
 398:	71 e0       	ldi	r23, 0x01	; 1
 39a:	81 e1       	ldi	r24, 0x11	; 17
 39c:	b0 df       	rcall	.-160    	; 0x2fe <LCD_DisplayString>
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	0f 91       	pop	r16
 3a6:	ff 90       	pop	r15
 3a8:	ef 90       	pop	r14
 3aa:	df 90       	pop	r13
 3ac:	cf 90       	pop	r12
 3ae:	08 95       	ret

000003b0 <read_finger_1>:

void read_finger_1()  {        //for char_buffer1
 3b0:	ef 92       	push	r14
 3b2:	ff 92       	push	r15
 3b4:	0f 93       	push	r16
 3b6:	1f 93       	push	r17
 3b8:	cf 93       	push	r28
 3ba:	df 93       	push	r29
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 3bc:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	if(USART_IsSendReady(1)) {
 3c0:	85 ff       	sbrs	r24, 5
 3c2:	85 c0       	rjmp	.+266    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
		LCD_DisplayString(1, "Scanning........");
 3c4:	6a e1       	ldi	r22, 0x1A	; 26
 3c6:	71 e0       	ldi	r23, 0x01	; 1
 3c8:	81 e0       	ldi	r24, 0x01	; 1
 3ca:	99 df       	rcall	.-206    	; 0x2fe <LCD_DisplayString>
		LCD_DisplayString(17, "Reading finger 1");
 3cc:	6b e2       	ldi	r22, 0x2B	; 43
 3ce:	71 e0       	ldi	r23, 0x01	; 1
 3d0:	81 e1       	ldi	r24, 0x11	; 17
 3d2:	95 df       	rcall	.-214    	; 0x2fe <LCD_DisplayString>
		int i = 0;
		char k = 1, ch = 1;
		USART_Flush(1);
 3d4:	81 e0       	ldi	r24, 0x01	; 1
 3d6:	13 df       	rcall	.-474    	; 0x1fe <USART_Flush>
		
		USART_Send(239, 1);
 3d8:	61 e0       	ldi	r22, 0x01	; 1
 3da:	8f ee       	ldi	r24, 0xEF	; 239
 3dc:	2d df       	rcall	.-422    	; 0x238 <USART_Send>
		USART_Send(1, 1);
 3de:	61 e0       	ldi	r22, 0x01	; 1
 3e0:	81 e0       	ldi	r24, 0x01	; 1
 3e2:	2a df       	rcall	.-428    	; 0x238 <USART_Send>
		USART_Send(255, 1);
 3e4:	61 e0       	ldi	r22, 0x01	; 1
 3e6:	8f ef       	ldi	r24, 0xFF	; 255
 3e8:	27 df       	rcall	.-434    	; 0x238 <USART_Send>
		USART_Send(255, 1);
 3ea:	61 e0       	ldi	r22, 0x01	; 1
 3ec:	8f ef       	ldi	r24, 0xFF	; 255
 3ee:	24 df       	rcall	.-440    	; 0x238 <USART_Send>
		USART_Send(255, 1);
 3f0:	61 e0       	ldi	r22, 0x01	; 1
 3f2:	8f ef       	ldi	r24, 0xFF	; 255
 3f4:	21 df       	rcall	.-446    	; 0x238 <USART_Send>
		USART_Send(255, 1);
 3f6:	61 e0       	ldi	r22, 0x01	; 1
 3f8:	8f ef       	ldi	r24, 0xFF	; 255
 3fa:	1e df       	rcall	.-452    	; 0x238 <USART_Send>
		USART_Send(1, 1);
 3fc:	61 e0       	ldi	r22, 0x01	; 1
 3fe:	81 e0       	ldi	r24, 0x01	; 1
 400:	1b df       	rcall	.-458    	; 0x238 <USART_Send>
		USART_Send(0, 1);
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	18 df       	rcall	.-464    	; 0x238 <USART_Send>
		USART_Send(3, 1);
 408:	61 e0       	ldi	r22, 0x01	; 1
 40a:	83 e0       	ldi	r24, 0x03	; 3
		USART_Send(1, 1);
 40c:	15 df       	rcall	.-470    	; 0x238 <USART_Send>
 40e:	61 e0       	ldi	r22, 0x01	; 1
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	12 df       	rcall	.-476    	; 0x238 <USART_Send>
		USART_Send(0, 1);
 414:	61 e0       	ldi	r22, 0x01	; 1
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	0f df       	rcall	.-482    	; 0x238 <USART_Send>
		USART_Send(5, 1);
 41a:	61 e0       	ldi	r22, 0x01	; 1
 41c:	85 e0       	ldi	r24, 0x05	; 5
 41e:	0c df       	rcall	.-488    	; 0x238 <USART_Send>
 420:	81 e0       	ldi	r24, 0x01	; 1

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 422:	1c df       	rcall	.-456    	; 0x25c <USART_Receive>
 424:	c0 e0       	ldi	r28, 0x00	; 0
		USART_Send(3, 1);
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
 426:	d0 e0       	ldi	r29, 0x00	; 0
 428:	e1 2c       	mov	r14, r1
					USART_Send(1, 1);
					USART_Send(0, 1);
					USART_Send(8, 1);
					i = 0;

					for(i = 0; i < 10; i++) {
 42a:	f1 2c       	mov	r15, r1
 42c:	4b c0       	rjmp	.+150    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 42e:	81 e0       	ldi	r24, 0x01	; 1
 430:	15 df       	rcall	.-470    	; 0x25c <USART_Receive>
 432:	18 2f       	mov	r17, r24
			if(i == 9) {
 434:	c9 30       	cpi	r28, 0x09	; 9
 436:	d1 05       	cpc	r29, r1
 438:	09 f0       	breq	.+2      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
				ch = k;
				k = USART_Receive(1);
 43a:	44 c0       	rjmp	.+136    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 43c:	81 e0       	ldi	r24, 0x01	; 1
				k = USART_Receive(1);
 43e:	0e df       	rcall	.-484    	; 0x25c <USART_Receive>
 440:	81 e0       	ldi	r24, 0x01	; 1

				if(ch == 0x00) {
 442:	0c df       	rcall	.-488    	; 0x25c <USART_Receive>
 444:	11 11       	cpse	r17, r1
					//PORTA |= (1<<0);
					USART_Flush(1);
 446:	43 c0       	rjmp	.+134    	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 448:	81 e0       	ldi	r24, 0x01	; 1
					k = 1;
					USART_Send(239, 1);
 44a:	d9 de       	rcall	.-590    	; 0x1fe <USART_Flush>
 44c:	61 e0       	ldi	r22, 0x01	; 1
 44e:	8f ee       	ldi	r24, 0xEF	; 239
					USART_Send(1, 1);
 450:	f3 de       	rcall	.-538    	; 0x238 <USART_Send>
 452:	61 e0       	ldi	r22, 0x01	; 1
 454:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(255, 1);
 456:	f0 de       	rcall	.-544    	; 0x238 <USART_Send>
 458:	61 e0       	ldi	r22, 0x01	; 1
 45a:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 45c:	ed de       	rcall	.-550    	; 0x238 <USART_Send>
 45e:	61 e0       	ldi	r22, 0x01	; 1
 460:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 462:	ea de       	rcall	.-556    	; 0x238 <USART_Send>
 464:	61 e0       	ldi	r22, 0x01	; 1
 466:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 468:	e7 de       	rcall	.-562    	; 0x238 <USART_Send>
 46a:	61 e0       	ldi	r22, 0x01	; 1
 46c:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(1, 1);
 46e:	e4 de       	rcall	.-568    	; 0x238 <USART_Send>
 470:	61 e0       	ldi	r22, 0x01	; 1
 472:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(0, 1);
 474:	e1 de       	rcall	.-574    	; 0x238 <USART_Send>
 476:	61 e0       	ldi	r22, 0x01	; 1
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	de de       	rcall	.-580    	; 0x238 <USART_Send>
					USART_Send(4, 1);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	84 e0       	ldi	r24, 0x04	; 4
 480:	db de       	rcall	.-586    	; 0x238 <USART_Send>
					USART_Send(2, 1);
 482:	61 e0       	ldi	r22, 0x01	; 1
 484:	82 e0       	ldi	r24, 0x02	; 2
 486:	d8 de       	rcall	.-592    	; 0x238 <USART_Send>
 488:	61 e0       	ldi	r22, 0x01	; 1
					USART_Send(1, 1);
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	d5 de       	rcall	.-598    	; 0x238 <USART_Send>
 48e:	61 e0       	ldi	r22, 0x01	; 1
 490:	80 e0       	ldi	r24, 0x00	; 0
					USART_Send(0, 1);
 492:	d2 de       	rcall	.-604    	; 0x238 <USART_Send>
 494:	61 e0       	ldi	r22, 0x01	; 1
 496:	88 e0       	ldi	r24, 0x08	; 8
					USART_Send(8, 1);
 498:	cf de       	rcall	.-610    	; 0x238 <USART_Send>
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	df de       	rcall	.-578    	; 0x25c <USART_Receive>
 49e:	ce 2d       	mov	r28, r14
					i = 0;

					for(i = 0; i < 10; i++) {
						k = USART_Receive(1);
 4a0:	df 2d       	mov	r29, r15
 4a2:	06 c0       	rjmp	.+12     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4a4:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(1, 1);
					USART_Send(0, 1);
					USART_Send(8, 1);
					i = 0;

					for(i = 0; i < 10; i++) {
 4a6:	da de       	rcall	.-588    	; 0x25c <USART_Receive>
 4a8:	81 e0       	ldi	r24, 0x01	; 1
 4aa:	d8 de       	rcall	.-592    	; 0x25c <USART_Receive>
						k = USART_Receive(1);

						if(i == 9) {
							ch = k;
							k = USART_Receive(1);
 4ac:	22 96       	adiw	r28, 0x02	; 2
 4ae:	0a c0       	rjmp	.+20     	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 4b0:	8e 01       	movw	r16, r28
							k = USART_Receive(1);
 4b2:	0f 5f       	subi	r16, 0xFF	; 255
 4b4:	1f 4f       	sbci	r17, 0xFF	; 255
 4b6:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(1, 1);
					USART_Send(0, 1);
					USART_Send(8, 1);
					i = 0;

					for(i = 0; i < 10; i++) {
 4b8:	d1 de       	rcall	.-606    	; 0x25c <USART_Receive>
 4ba:	09 30       	cpi	r16, 0x09	; 9
 4bc:	11 05       	cpc	r17, r1
 4be:	91 f3       	breq	.-28     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
 4c0:	e8 01       	movw	r28, r16
						k = USART_Receive(1);
 4c2:	f6 cf       	rjmp	.-20     	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
 4c4:	21 96       	adiw	r28, 0x01	; 1
 4c6:	ca 30       	cpi	r28, 0x0A	; 10

						if(i == 9) {
 4c8:	d1 05       	cpc	r29, r1
 4ca:	0c f4       	brge	.+2      	; 0x4ce <__LOCK_REGION_LENGTH__+0xce>
 4cc:	b0 cf       	rjmp	.-160    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
					USART_Send(1, 1);
					USART_Send(0, 1);
					USART_Send(8, 1);
					i = 0;

					for(i = 0; i < 10; i++) {
 4ce:	88 ee       	ldi	r24, 0xE8	; 232
 4d0:	93 e0       	ldi	r25, 0x03	; 3
		USART_Send(3, 1);
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
 4d2:	d6 de       	rcall	.-596    	; 0x280 <delay_ms>
 4d4:	df 91       	pop	r29
 4d6:	cf 91       	pop	r28
 4d8:	1f 91       	pop	r17
 4da:	0f 91       	pop	r16
					}
				}
			}
		}
	}
	delay_ms(1000);
 4dc:	ff 90       	pop	r15
 4de:	ef 90       	pop	r14
 4e0:	08 95       	ret

000004e2 <read_finger_2>:
 4e2:	ef 92       	push	r14
}
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

void read_finger_2() {         //for char_buffer2
	if(USART_IsSendReady(1)) {
 4f2:	85 ff       	sbrs	r24, 5
 4f4:	85 c0       	rjmp	.+266    	; 0x600 <read_finger_2+0x11e>
		LCD_DisplayString(1, "Scanning........");
 4f6:	6a e1       	ldi	r22, 0x1A	; 26
 4f8:	71 e0       	ldi	r23, 0x01	; 1
 4fa:	81 e0       	ldi	r24, 0x01	; 1
 4fc:	00 df       	rcall	.-512    	; 0x2fe <LCD_DisplayString>
		LCD_DisplayString(17, "Reading finger 2");
 4fe:	6c e3       	ldi	r22, 0x3C	; 60
 500:	71 e0       	ldi	r23, 0x01	; 1
 502:	81 e1       	ldi	r24, 0x11	; 17
 504:	fc de       	rcall	.-520    	; 0x2fe <LCD_DisplayString>
		int i = 0;
		char k = 1, ch = 1;
		USART_Flush(1);
 506:	81 e0       	ldi	r24, 0x01	; 1
 508:	7a de       	rcall	.-780    	; 0x1fe <USART_Flush>
		
		USART_Send(239, 1);
 50a:	61 e0       	ldi	r22, 0x01	; 1
 50c:	8f ee       	ldi	r24, 0xEF	; 239
 50e:	94 de       	rcall	.-728    	; 0x238 <USART_Send>
		USART_Send(1, 1);
 510:	61 e0       	ldi	r22, 0x01	; 1
 512:	81 e0       	ldi	r24, 0x01	; 1
 514:	91 de       	rcall	.-734    	; 0x238 <USART_Send>
		USART_Send(255, 1);
 516:	61 e0       	ldi	r22, 0x01	; 1
 518:	8f ef       	ldi	r24, 0xFF	; 255
 51a:	8e de       	rcall	.-740    	; 0x238 <USART_Send>
		USART_Send(255, 1);
 51c:	61 e0       	ldi	r22, 0x01	; 1
 51e:	8f ef       	ldi	r24, 0xFF	; 255
 520:	8b de       	rcall	.-746    	; 0x238 <USART_Send>
		USART_Send(255, 1);
 522:	61 e0       	ldi	r22, 0x01	; 1
 524:	8f ef       	ldi	r24, 0xFF	; 255
 526:	88 de       	rcall	.-752    	; 0x238 <USART_Send>
		USART_Send(255, 1);
 528:	61 e0       	ldi	r22, 0x01	; 1
 52a:	8f ef       	ldi	r24, 0xFF	; 255
 52c:	85 de       	rcall	.-758    	; 0x238 <USART_Send>
		USART_Send(1, 1);
 52e:	61 e0       	ldi	r22, 0x01	; 1
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	82 de       	rcall	.-764    	; 0x238 <USART_Send>
		USART_Send(0, 1);
 534:	61 e0       	ldi	r22, 0x01	; 1
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	7f de       	rcall	.-770    	; 0x238 <USART_Send>
		USART_Send(3, 1);
 53a:	61 e0       	ldi	r22, 0x01	; 1
 53c:	83 e0       	ldi	r24, 0x03	; 3
		USART_Send(1, 1);
 53e:	7c de       	rcall	.-776    	; 0x238 <USART_Send>
 540:	61 e0       	ldi	r22, 0x01	; 1
 542:	81 e0       	ldi	r24, 0x01	; 1
 544:	79 de       	rcall	.-782    	; 0x238 <USART_Send>
		USART_Send(0, 1);
 546:	61 e0       	ldi	r22, 0x01	; 1
 548:	80 e0       	ldi	r24, 0x00	; 0
 54a:	76 de       	rcall	.-788    	; 0x238 <USART_Send>
		USART_Send(5, 1);
 54c:	61 e0       	ldi	r22, 0x01	; 1
 54e:	85 e0       	ldi	r24, 0x05	; 5
 550:	73 de       	rcall	.-794    	; 0x238 <USART_Send>
 552:	81 e0       	ldi	r24, 0x01	; 1

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 554:	83 de       	rcall	.-762    	; 0x25c <USART_Receive>
 556:	c0 e0       	ldi	r28, 0x00	; 0
		USART_Send(3, 1);
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
 558:	d0 e0       	ldi	r29, 0x00	; 0
 55a:	e1 2c       	mov	r14, r1
					USART_Send(2, 1);
					USART_Send(2, 1);
					USART_Send(0, 1);
					USART_Send(9, 1);
					i = 0;
					for(i = 0; i < 10; i++) {
 55c:	f1 2c       	mov	r15, r1
 55e:	4b c0       	rjmp	.+150    	; 0x5f6 <read_finger_2+0x114>
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	7c de       	rcall	.-776    	; 0x25c <USART_Receive>
 564:	18 2f       	mov	r17, r24
			if(i == 9) {
 566:	c9 30       	cpi	r28, 0x09	; 9
 568:	d1 05       	cpc	r29, r1
 56a:	09 f0       	breq	.+2      	; 0x56e <read_finger_2+0x8c>
				ch = k;
				k = USART_Receive(1);
 56c:	44 c0       	rjmp	.+136    	; 0x5f6 <read_finger_2+0x114>
 56e:	81 e0       	ldi	r24, 0x01	; 1
				k = USART_Receive(1);
 570:	75 de       	rcall	.-790    	; 0x25c <USART_Receive>
 572:	81 e0       	ldi	r24, 0x01	; 1
				if(ch == 0x00) {
 574:	73 de       	rcall	.-794    	; 0x25c <USART_Receive>
 576:	11 11       	cpse	r17, r1
					//PORTA |= (1<<2);
					k = 1;
					USART_Flush(1);
 578:	43 c0       	rjmp	.+134    	; 0x600 <read_finger_2+0x11e>
 57a:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(239, 1);
 57c:	40 de       	rcall	.-896    	; 0x1fe <USART_Flush>
 57e:	61 e0       	ldi	r22, 0x01	; 1
 580:	8f ee       	ldi	r24, 0xEF	; 239
					USART_Send(1, 1);
 582:	5a de       	rcall	.-844    	; 0x238 <USART_Send>
 584:	61 e0       	ldi	r22, 0x01	; 1
 586:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(255, 1);
 588:	57 de       	rcall	.-850    	; 0x238 <USART_Send>
 58a:	61 e0       	ldi	r22, 0x01	; 1
 58c:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 58e:	54 de       	rcall	.-856    	; 0x238 <USART_Send>
 590:	61 e0       	ldi	r22, 0x01	; 1
 592:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 594:	51 de       	rcall	.-862    	; 0x238 <USART_Send>
 596:	61 e0       	ldi	r22, 0x01	; 1
 598:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 59a:	4e de       	rcall	.-868    	; 0x238 <USART_Send>
 59c:	61 e0       	ldi	r22, 0x01	; 1
 59e:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(1, 1);
 5a0:	4b de       	rcall	.-874    	; 0x238 <USART_Send>
 5a2:	61 e0       	ldi	r22, 0x01	; 1
 5a4:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(0, 1);
 5a6:	48 de       	rcall	.-880    	; 0x238 <USART_Send>
 5a8:	61 e0       	ldi	r22, 0x01	; 1
 5aa:	80 e0       	ldi	r24, 0x00	; 0
 5ac:	45 de       	rcall	.-886    	; 0x238 <USART_Send>
					USART_Send(4, 1);
 5ae:	61 e0       	ldi	r22, 0x01	; 1
 5b0:	84 e0       	ldi	r24, 0x04	; 4
 5b2:	42 de       	rcall	.-892    	; 0x238 <USART_Send>
					USART_Send(2, 1);
 5b4:	61 e0       	ldi	r22, 0x01	; 1
 5b6:	82 e0       	ldi	r24, 0x02	; 2
 5b8:	3f de       	rcall	.-898    	; 0x238 <USART_Send>
 5ba:	61 e0       	ldi	r22, 0x01	; 1
					USART_Send(2, 1);
 5bc:	82 e0       	ldi	r24, 0x02	; 2
 5be:	3c de       	rcall	.-904    	; 0x238 <USART_Send>
 5c0:	61 e0       	ldi	r22, 0x01	; 1
 5c2:	80 e0       	ldi	r24, 0x00	; 0
					USART_Send(0, 1);
 5c4:	39 de       	rcall	.-910    	; 0x238 <USART_Send>
 5c6:	61 e0       	ldi	r22, 0x01	; 1
 5c8:	89 e0       	ldi	r24, 0x09	; 9
					USART_Send(9, 1);
 5ca:	36 de       	rcall	.-916    	; 0x238 <USART_Send>
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	46 de       	rcall	.-884    	; 0x25c <USART_Receive>
 5d0:	ce 2d       	mov	r28, r14
					i = 0;
					for(i = 0; i < 10; i++) {
						k = USART_Receive(1);
 5d2:	df 2d       	mov	r29, r15
 5d4:	06 c0       	rjmp	.+12     	; 0x5e2 <read_finger_2+0x100>
 5d6:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(2, 1);
					USART_Send(2, 1);
					USART_Send(0, 1);
					USART_Send(9, 1);
					i = 0;
					for(i = 0; i < 10; i++) {
 5d8:	41 de       	rcall	.-894    	; 0x25c <USART_Receive>
 5da:	81 e0       	ldi	r24, 0x01	; 1
 5dc:	3f de       	rcall	.-898    	; 0x25c <USART_Receive>
						k = USART_Receive(1);
						if(i == 9) {
							ch = k;
							k = USART_Receive(1);
 5de:	22 96       	adiw	r28, 0x02	; 2
 5e0:	0a c0       	rjmp	.+20     	; 0x5f6 <read_finger_2+0x114>
 5e2:	8e 01       	movw	r16, r28
							k = USART_Receive(1);
 5e4:	0f 5f       	subi	r16, 0xFF	; 255
 5e6:	1f 4f       	sbci	r17, 0xFF	; 255
 5e8:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(2, 1);
					USART_Send(2, 1);
					USART_Send(0, 1);
					USART_Send(9, 1);
					i = 0;
					for(i = 0; i < 10; i++) {
 5ea:	38 de       	rcall	.-912    	; 0x25c <USART_Receive>
 5ec:	09 30       	cpi	r16, 0x09	; 9
 5ee:	11 05       	cpc	r17, r1
 5f0:	91 f3       	breq	.-28     	; 0x5d6 <read_finger_2+0xf4>
 5f2:	e8 01       	movw	r28, r16
						k = USART_Receive(1);
 5f4:	f6 cf       	rjmp	.-20     	; 0x5e2 <read_finger_2+0x100>
 5f6:	21 96       	adiw	r28, 0x01	; 1
 5f8:	ca 30       	cpi	r28, 0x0A	; 10
						if(i == 9) {
 5fa:	d1 05       	cpc	r29, r1
 5fc:	0c f4       	brge	.+2      	; 0x600 <read_finger_2+0x11e>
 5fe:	b0 cf       	rjmp	.-160    	; 0x560 <read_finger_2+0x7e>
					USART_Send(2, 1);
					USART_Send(2, 1);
					USART_Send(0, 1);
					USART_Send(9, 1);
					i = 0;
					for(i = 0; i < 10; i++) {
 600:	88 ee       	ldi	r24, 0xE8	; 232
 602:	93 e0       	ldi	r25, 0x03	; 3
		USART_Send(3, 1);
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
 604:	3d de       	rcall	.-902    	; 0x280 <delay_ms>
 606:	df 91       	pop	r29
 608:	cf 91       	pop	r28
 60a:	1f 91       	pop	r17
 60c:	0f 91       	pop	r16
					}
				}
			}
		}
	}
	delay_ms(1000);
 60e:	ff 90       	pop	r15
 610:	ef 90       	pop	r14
 612:	08 95       	ret

00000614 <make_template>:
 614:	cf 93       	push	r28
}
 616:	df 93       	push	r29
 618:	6d e4       	ldi	r22, 0x4D	; 77
 61a:	71 e0       	ldi	r23, 0x01	; 1
 61c:	81 e1       	ldi	r24, 0x11	; 17
 61e:	6f de       	rcall	.-802    	; 0x2fe <LCD_DisplayString>
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	ed dd       	rcall	.-1062   	; 0x1fe <USART_Flush>
	LCD_DisplayString(17, "Making template");
	int i = 0;
	char k = 1, ch = 1;
	USART_Flush(1);
	k = 1;
	USART_Send(239, 1);
 624:	61 e0       	ldi	r22, 0x01	; 1
 626:	8f ee       	ldi	r24, 0xEF	; 239
 628:	07 de       	rcall	.-1010   	; 0x238 <USART_Send>
	USART_Send(1, 1);
 62a:	61 e0       	ldi	r22, 0x01	; 1
 62c:	81 e0       	ldi	r24, 0x01	; 1
 62e:	04 de       	rcall	.-1016   	; 0x238 <USART_Send>
	USART_Send(255, 1);
 630:	61 e0       	ldi	r22, 0x01	; 1
 632:	8f ef       	ldi	r24, 0xFF	; 255
 634:	01 de       	rcall	.-1022   	; 0x238 <USART_Send>
	USART_Send(255, 1);
 636:	61 e0       	ldi	r22, 0x01	; 1
 638:	8f ef       	ldi	r24, 0xFF	; 255
 63a:	fe dd       	rcall	.-1028   	; 0x238 <USART_Send>
	USART_Send(255, 1);
 63c:	61 e0       	ldi	r22, 0x01	; 1
 63e:	8f ef       	ldi	r24, 0xFF	; 255
 640:	fb dd       	rcall	.-1034   	; 0x238 <USART_Send>
	USART_Send(255, 1);
 642:	61 e0       	ldi	r22, 0x01	; 1
 644:	8f ef       	ldi	r24, 0xFF	; 255
 646:	f8 dd       	rcall	.-1040   	; 0x238 <USART_Send>
	USART_Send(1, 1);
 648:	61 e0       	ldi	r22, 0x01	; 1
 64a:	81 e0       	ldi	r24, 0x01	; 1
 64c:	f5 dd       	rcall	.-1046   	; 0x238 <USART_Send>
	USART_Send(0, 1);
 64e:	61 e0       	ldi	r22, 0x01	; 1
 650:	80 e0       	ldi	r24, 0x00	; 0
 652:	f2 dd       	rcall	.-1052   	; 0x238 <USART_Send>
	USART_Send(3, 1);
 654:	61 e0       	ldi	r22, 0x01	; 1
 656:	83 e0       	ldi	r24, 0x03	; 3
 658:	ef dd       	rcall	.-1058   	; 0x238 <USART_Send>
	USART_Send(5, 1);
 65a:	61 e0       	ldi	r22, 0x01	; 1
 65c:	85 e0       	ldi	r24, 0x05	; 5
 65e:	ec dd       	rcall	.-1064   	; 0x238 <USART_Send>
 660:	61 e0       	ldi	r22, 0x01	; 1
	USART_Send(0, 1);
 662:	80 e0       	ldi	r24, 0x00	; 0
 664:	e9 dd       	rcall	.-1070   	; 0x238 <USART_Send>
	USART_Send(9, 1);
 666:	61 e0       	ldi	r22, 0x01	; 1
 668:	89 e0       	ldi	r24, 0x09	; 9
 66a:	e6 dd       	rcall	.-1076   	; 0x238 <USART_Send>

	for(i = 0; i < 10; i++) {
		k = USART_Receive(1);
 66c:	81 e0       	ldi	r24, 0x01	; 1
 66e:	f6 dd       	rcall	.-1044   	; 0x25c <USART_Receive>
 670:	c9 e0       	ldi	r28, 0x09	; 9
 672:	d0 e0       	ldi	r29, 0x00	; 0
 674:	05 c0       	rjmp	.+10     	; 0x680 <make_template+0x6c>
 676:	81 e0       	ldi	r24, 0x01	; 1

		if(i==9) {
			ch = k;
			k = USART_Receive(1);
 678:	f1 dd       	rcall	.-1054   	; 0x25c <USART_Receive>
 67a:	81 e0       	ldi	r24, 0x01	; 1
 67c:	ef dd       	rcall	.-1058   	; 0x25c <USART_Receive>
			k = USART_Receive(1);
 67e:	05 c0       	rjmp	.+10     	; 0x68a <make_template+0x76>
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	ec dd       	rcall	.-1064   	; 0x25c <USART_Receive>
				//PORTA |= (1<<4);
			}
		}
	}
	//delay_ms(100);
}
 684:	21 97       	sbiw	r28, 0x01	; 1
	USART_Send(5, 1);
	USART_Send(0, 1);
	USART_Send(9, 1);

	for(i = 0; i < 10; i++) {
		k = USART_Receive(1);
 686:	e1 f7       	brne	.-8      	; 0x680 <make_template+0x6c>
 688:	f6 cf       	rjmp	.-20     	; 0x676 <make_template+0x62>
 68a:	df 91       	pop	r29
 68c:	cf 91       	pop	r28

		if(i==9) {
 68e:	08 95       	ret

00000690 <check_finger>:
 690:	1f 93       	push	r17
				//PORTA |= (1<<4);
			}
		}
	}
	//delay_ms(100);
}
 692:	cf 93       	push	r28
 694:	df 93       	push	r29
 696:	6d e5       	ldi	r22, 0x5D	; 93


void check_finger() {
	LCD_DisplayString(1, "Checking finger");
 698:	71 e0       	ldi	r23, 0x01	; 1
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	30 de       	rcall	.-928    	; 0x2fe <LCD_DisplayString>
	int i = 0;
	char k = 1, ch = 1;
	USART_Flush(1);
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	ae dd       	rcall	.-1188   	; 0x1fe <USART_Flush>

	USART_Send(239, 1);
 6a2:	61 e0       	ldi	r22, 0x01	; 1
 6a4:	8f ee       	ldi	r24, 0xEF	; 239
 6a6:	c8 dd       	rcall	.-1136   	; 0x238 <USART_Send>
	USART_Send(1, 1);
 6a8:	61 e0       	ldi	r22, 0x01	; 1
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	c5 dd       	rcall	.-1142   	; 0x238 <USART_Send>
	USART_Send(255, 1);
 6ae:	61 e0       	ldi	r22, 0x01	; 1
 6b0:	8f ef       	ldi	r24, 0xFF	; 255
 6b2:	c2 dd       	rcall	.-1148   	; 0x238 <USART_Send>
	USART_Send(255, 1);
 6b4:	61 e0       	ldi	r22, 0x01	; 1
 6b6:	8f ef       	ldi	r24, 0xFF	; 255
 6b8:	bf dd       	rcall	.-1154   	; 0x238 <USART_Send>
	USART_Send(255, 1);
 6ba:	61 e0       	ldi	r22, 0x01	; 1
 6bc:	8f ef       	ldi	r24, 0xFF	; 255
 6be:	bc dd       	rcall	.-1160   	; 0x238 <USART_Send>
	USART_Send(255, 1);
 6c0:	61 e0       	ldi	r22, 0x01	; 1
 6c2:	8f ef       	ldi	r24, 0xFF	; 255
 6c4:	b9 dd       	rcall	.-1166   	; 0x238 <USART_Send>
	USART_Send(1, 1);
 6c6:	61 e0       	ldi	r22, 0x01	; 1
 6c8:	81 e0       	ldi	r24, 0x01	; 1
 6ca:	b6 dd       	rcall	.-1172   	; 0x238 <USART_Send>
	USART_Send(0, 1);
 6cc:	61 e0       	ldi	r22, 0x01	; 1
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	b3 dd       	rcall	.-1178   	; 0x238 <USART_Send>
	USART_Send(8, 1);
 6d2:	61 e0       	ldi	r22, 0x01	; 1
 6d4:	88 e0       	ldi	r24, 0x08	; 8
 6d6:	b0 dd       	rcall	.-1184   	; 0x238 <USART_Send>
	USART_Send(4, 1);
 6d8:	61 e0       	ldi	r22, 0x01	; 1
 6da:	84 e0       	ldi	r24, 0x04	; 4
 6dc:	ad dd       	rcall	.-1190   	; 0x238 <USART_Send>
	USART_Send(1, 1);
 6de:	61 e0       	ldi	r22, 0x01	; 1
 6e0:	81 e0       	ldi	r24, 0x01	; 1
 6e2:	aa dd       	rcall	.-1196   	; 0x238 <USART_Send>
	USART_Send(0, 1);
 6e4:	61 e0       	ldi	r22, 0x01	; 1
 6e6:	80 e0       	ldi	r24, 0x00	; 0
 6e8:	a7 dd       	rcall	.-1202   	; 0x238 <USART_Send>
	USART_Send(0, 1);
 6ea:	61 e0       	ldi	r22, 0x01	; 1
 6ec:	80 e0       	ldi	r24, 0x00	; 0
	USART_Send(0, 1);
 6ee:	a4 dd       	rcall	.-1208   	; 0x238 <USART_Send>
 6f0:	61 e0       	ldi	r22, 0x01	; 1
 6f2:	80 e0       	ldi	r24, 0x00	; 0
	USART_Send(10, 1);
 6f4:	a1 dd       	rcall	.-1214   	; 0x238 <USART_Send>
 6f6:	61 e0       	ldi	r22, 0x01	; 1
 6f8:	8a e0       	ldi	r24, 0x0A	; 10
	USART_Send(0, 1);
 6fa:	9e dd       	rcall	.-1220   	; 0x238 <USART_Send>
 6fc:	61 e0       	ldi	r22, 0x01	; 1
 6fe:	80 e0       	ldi	r24, 0x00	; 0
	USART_Send(24, 1);
 700:	9b dd       	rcall	.-1226   	; 0x238 <USART_Send>
 702:	61 e0       	ldi	r22, 0x01	; 1
 704:	88 e1       	ldi	r24, 0x18	; 24

	for(i = 0; i < 10; i++) {
		k = USART_Receive(1);
 706:	98 dd       	rcall	.-1232   	; 0x238 <USART_Send>
 708:	81 e0       	ldi	r24, 0x01	; 1
 70a:	a8 dd       	rcall	.-1200   	; 0x25c <USART_Receive>
 70c:	c9 e0       	ldi	r28, 0x09	; 9
 70e:	d0 e0       	ldi	r29, 0x00	; 0

		if(i == 9) {
			ch = k;
			k = USART_Receive(1);
 710:	26 c0       	rjmp	.+76     	; 0x75e <check_finger+0xce>
 712:	81 e0       	ldi	r24, 0x01	; 1
			k = USART_Receive(1);
 714:	a3 dd       	rcall	.-1210   	; 0x25c <USART_Receive>
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	a1 dd       	rcall	.-1214   	; 0x25c <USART_Receive>
			k = USART_Receive(1);
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	9f dd       	rcall	.-1218   	; 0x25c <USART_Receive>
			k = USART_Receive(1);
 71e:	81 e0       	ldi	r24, 0x01	; 1
 720:	9d dd       	rcall	.-1222   	; 0x25c <USART_Receive>
 722:	81 e0       	ldi	r24, 0x01	; 1
			k = USART_Receive(1);
 724:	9b dd       	rcall	.-1226   	; 0x25c <USART_Receive>
 726:	81 e0       	ldi	r24, 0x01	; 1
			k = USART_Receive(1);
 728:	99 dd       	rcall	.-1230   	; 0x25c <USART_Receive>
 72a:	c8 2f       	mov	r28, r24
 72c:	11 11       	cpse	r17, r1
			//LCDclr();

			if(ch == 0x00) {
 72e:	0e c0       	rjmp	.+28     	; 0x74c <check_finger+0xbc>
				//PORTA |= (1<<5);
				//LCDdisplay("FINGER FOUND");
				//LCD_ClearScreen();
				LCD_DisplayString(1, "UNLOCKED        ");
 730:	6d e6       	ldi	r22, 0x6D	; 109
 732:	71 e0       	ldi	r23, 0x01	; 1
 734:	81 e0       	ldi	r24, 0x01	; 1
 736:	e3 dd       	rcall	.-1082   	; 0x2fe <LCD_DisplayString>
 738:	6e e7       	ldi	r22, 0x7E	; 126
				LCD_DisplayString(17, "Finger FOUND!!    ");
 73a:	71 e0       	ldi	r23, 0x01	; 1
 73c:	81 e1       	ldi	r24, 0x11	; 17
 73e:	df dd       	rcall	.-1090   	; 0x2fe <LCD_DisplayString>
 740:	6c 2f       	mov	r22, r28
				LCD_DisplayString(28, k);
 742:	70 e0       	ldi	r23, 0x00	; 0
 744:	8c e1       	ldi	r24, 0x1C	; 28
 746:	db dd       	rcall	.-1098   	; 0x2fe <LCD_DisplayString>
 748:	2a 9a       	sbi	0x05, 2	; 5
 74a:	0f c0       	rjmp	.+30     	; 0x76a <check_finger+0xda>
				PORTB |= (1 << PB2);
 74c:	61 e9       	ldi	r22, 0x91	; 145
 74e:	71 e0       	ldi	r23, 0x01	; 1
				} else {
				LCD_DisplayString(1, "                ");
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	d5 dd       	rcall	.-1110   	; 0x2fe <LCD_DisplayString>
 754:	62 ea       	ldi	r22, 0xA2	; 162
 756:	71 e0       	ldi	r23, 0x01	; 1
 758:	81 e1       	ldi	r24, 0x11	; 17
				LCD_DisplayString(17, "Finger NOT Found   ");
 75a:	d1 dd       	rcall	.-1118   	; 0x2fe <LCD_DisplayString>
 75c:	06 c0       	rjmp	.+12     	; 0x76a <check_finger+0xda>
 75e:	81 e0       	ldi	r24, 0x01	; 1
 760:	7d dd       	rcall	.-1286   	; 0x25c <USART_Receive>
 762:	18 2f       	mov	r17, r24
 764:	21 97       	sbiw	r28, 0x01	; 1
	USART_Send(10, 1);
	USART_Send(0, 1);
	USART_Send(24, 1);

	for(i = 0; i < 10; i++) {
		k = USART_Receive(1);
 766:	d9 f7       	brne	.-10     	; 0x75e <check_finger+0xce>
 768:	d4 cf       	rjmp	.-88     	; 0x712 <check_finger+0x82>
 76a:	88 ee       	ldi	r24, 0xE8	; 232
 76c:	93 e0       	ldi	r25, 0x03	; 3
 76e:	88 dd       	rcall	.-1264   	; 0x280 <delay_ms>

		if(i == 9) {
 770:	df 91       	pop	r29
 772:	cf 91       	pop	r28
				LCD_DisplayString(1, "                ");
				LCD_DisplayString(17, "Finger NOT Found   ");
			}
		}
	}
	delay_ms(1000);
 774:	1f 91       	pop	r17
 776:	08 95       	ret

00000778 <unlock>:
 778:	e0 91 04 02 	lds	r30, 0x0204	; 0x800204 <state1>
}
 77c:	8e 2f       	mov	r24, r30
 77e:	90 e0       	ldi	r25, 0x00	; 0
 780:	88 30       	cpi	r24, 0x08	; 8
 782:	91 05       	cpc	r25, r1


enum States1 {init1, wait, scanRFID, nextState, readFinger1, readFinger2, makeTemplate, checkFinger} state1;
	
void unlock() {
	switch(state1) {
 784:	08 f0       	brcs	.+2      	; 0x788 <unlock+0x10>
 786:	4e c0       	rjmp	.+156    	; 0x824 <unlock+0xac>
 788:	fc 01       	movw	r30, r24
 78a:	ea 5b       	subi	r30, 0xBA	; 186
 78c:	ff 4f       	sbci	r31, 0xFF	; 255
 78e:	a1 c0       	rjmp	.+322    	; 0x8d2 <__tablejump2__>
		case init1:
			state1 = wait;
 790:	81 e0       	ldi	r24, 0x01	; 1
 792:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state1>
			break;
 796:	4b c0       	rjmp	.+150    	; 0x82e <unlock+0xb6>
		case wait:
			if(GetBit(PINA, 1) == 0) {
 798:	01 99       	sbic	0x00, 1	; 0
 79a:	49 c0       	rjmp	.+146    	; 0x82e <unlock+0xb6>
				state1 = scanRFID;
 79c:	82 e0       	ldi	r24, 0x02	; 2
 79e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state1>
 7a2:	4d c0       	rjmp	.+154    	; 0x83e <unlock+0xc6>
			else {
				state1 = wait;
			}
			break;
		case scanRFID:
			if(strcmp(outID, card0) == 0 || strcmp(outID, card1) == 0 ) {
 7a4:	6b e0       	ldi	r22, 0x0B	; 11
 7a6:	71 e0       	ldi	r23, 0x01	; 1
 7a8:	89 ef       	ldi	r24, 0xF9	; 249
 7aa:	91 e0       	ldi	r25, 0x01	; 1
 7ac:	9b d0       	rcall	.+310    	; 0x8e4 <strcmp>
 7ae:	89 2b       	or	r24, r25
 7b0:	41 f0       	breq	.+16     	; 0x7c2 <unlock+0x4a>
 7b2:	60 e0       	ldi	r22, 0x00	; 0
 7b4:	71 e0       	ldi	r23, 0x01	; 1
 7b6:	89 ef       	ldi	r24, 0xF9	; 249
 7b8:	91 e0       	ldi	r25, 0x01	; 1
 7ba:	94 d0       	rcall	.+296    	; 0x8e4 <strcmp>
 7bc:	89 2b       	or	r24, r25
 7be:	09 f0       	breq	.+2      	; 0x7c2 <unlock+0x4a>
 7c0:	3e c0       	rjmp	.+124    	; 0x83e <unlock+0xc6>
				state1 = nextState;
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state1>
			scan_RFID();
			//delay_ms(1000);
			break;
		case nextState:
			LCD_ClearScreen();
			LCD_DisplayString(1, "Place Finger");
 7c8:	77 dd       	rcall	.-1298   	; 0x2b8 <LCD_ClearScreen>
 7ca:	66 eb       	ldi	r22, 0xB6	; 182
 7cc:	71 e0       	ldi	r23, 0x01	; 1
 7ce:	81 e0       	ldi	r24, 0x01	; 1
			PORTB |= (1 << PB1);
 7d0:	96 dd       	rcall	.-1236   	; 0x2fe <LCD_DisplayString>
			delay_ms(5000);
 7d2:	29 9a       	sbi	0x05, 1	; 5
 7d4:	88 e8       	ldi	r24, 0x88	; 136
 7d6:	93 e1       	ldi	r25, 0x13	; 19
			break;
 7d8:	53 cd       	rjmp	.-1370   	; 0x280 <delay_ms>
			else {
				state1 = scanRFID;
			}
			break;
		case nextState:
			state1 = readFinger1;
 7da:	08 95       	ret
 7dc:	84 e0       	ldi	r24, 0x04	; 4
			LCD_DisplayString(1, "Place Finger");
			PORTB |= (1 << PB1);
			delay_ms(5000);
			break;
		case readFinger1:
			read_finger_1();
 7de:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state1>
			delay_ms(1000);
 7e2:	e6 dd       	rcall	.-1076   	; 0x3b0 <read_finger_1>
 7e4:	88 ee       	ldi	r24, 0xE8	; 232
 7e6:	93 e0       	ldi	r25, 0x03	; 3
			break;
 7e8:	4b cd       	rjmp	.-1386   	; 0x280 <delay_ms>
			break;
		case nextState:
			state1 = readFinger1;
			break;
		case readFinger1:
			state1 = readFinger2;
 7ea:	08 95       	ret
 7ec:	85 e0       	ldi	r24, 0x05	; 5
 7ee:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state1>
			read_finger_1();
			delay_ms(1000);
			break;
		case readFinger2:
			read_finger_2();
			delay_ms(1000);
 7f2:	77 de       	rcall	.-786    	; 0x4e2 <read_finger_2>
 7f4:	88 ee       	ldi	r24, 0xE8	; 232
 7f6:	93 e0       	ldi	r25, 0x03	; 3
			break;
 7f8:	43 cd       	rjmp	.-1402   	; 0x280 <delay_ms>
			break;
		case readFinger1:
			state1 = readFinger2;
			break;
		case readFinger2:
			state1 = makeTemplate;
 7fa:	08 95       	ret
 7fc:	86 e0       	ldi	r24, 0x06	; 6
		case readFinger2:
			read_finger_2();
			delay_ms(1000);
			break;
		case makeTemplate:
			make_template();
 7fe:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state1>
			delay_ms(500);
 802:	08 df       	rcall	.-496    	; 0x614 <make_template>
 804:	84 ef       	ldi	r24, 0xF4	; 244
 806:	91 e0       	ldi	r25, 0x01	; 1
			break;
 808:	3b cd       	rjmp	.-1418   	; 0x280 <delay_ms>
			break;
		case readFinger2:
			state1 = makeTemplate;
			break;
		case makeTemplate:
			state1 = checkFinger;
 80a:	08 95       	ret
 80c:	87 e0       	ldi	r24, 0x07	; 7
 80e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state1>
		case makeTemplate:
			make_template();
			delay_ms(500);
			break;
		case checkFinger:
			check_finger();
 812:	3e df       	rcall	.-388    	; 0x690 <check_finger>
			delay_ms(10000);
 814:	80 e1       	ldi	r24, 0x10	; 16
 816:	97 e2       	ldi	r25, 0x27	; 39
 818:	33 cd       	rjmp	.-1434   	; 0x280 <delay_ms>
			break;
 81a:	08 95       	ret
			break;
		case makeTemplate:
			state1 = checkFinger;
			break;
		case checkFinger:
			state1 = wait;
 81c:	81 e0       	ldi	r24, 0x01	; 1
 81e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <state1>
			break;	
		default:
			state1 = init1;
 822:	05 c0       	rjmp	.+10     	; 0x82e <unlock+0xb6>
 824:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <state1>
		case init1:
			PORTB &= ~(1 << PB1);
			PORTB &= ~(1 << PB2);
			break;
		case wait:
			PORTB &= ~(1 << PB1);
 828:	29 98       	cbi	0x05, 1	; 5
			PORTB &= ~(1 << PB2);
 82a:	2a 98       	cbi	0x05, 2	; 5
			LCD_ClearScreen();
 82c:	08 95       	ret
 82e:	29 98       	cbi	0x05, 1	; 5
			LCD_DisplayString(1, "Locked: Waiting");
 830:	2a 98       	cbi	0x05, 2	; 5
 832:	42 dd       	rcall	.-1404   	; 0x2b8 <LCD_ClearScreen>
 834:	63 ec       	ldi	r22, 0xC3	; 195
 836:	71 e0       	ldi	r23, 0x01	; 1
 838:	81 e0       	ldi	r24, 0x01	; 1
			//delay_ms(100);
			break;
 83a:	61 cd       	rjmp	.-1342   	; 0x2fe <LCD_DisplayString>
		case scanRFID:
			LCD_DisplayString(1, "Scan Card Twice");
 83c:	08 95       	ret
 83e:	63 ed       	ldi	r22, 0xD3	; 211
 840:	71 e0       	ldi	r23, 0x01	; 1
 842:	81 e0       	ldi	r24, 0x01	; 1
 844:	5c dd       	rcall	.-1352   	; 0x2fe <LCD_DisplayString>
			scan_RFID();
 846:	70 cd       	rjmp	.-1312   	; 0x328 <scan_RFID>
 848:	08 95       	ret

0000084a <alarm>:
 84a:	80 91 05 02 	lds	r24, 0x0205	; 0x800205 <state2>
}

enum States2 {init2, alarmOff, alarmOn} state2;

void alarm() {
	switch(state2) {
 84e:	81 30       	cpi	r24, 0x01	; 1
 850:	41 f0       	breq	.+16     	; 0x862 <alarm+0x18>
 852:	18 f0       	brcs	.+6      	; 0x85a <alarm+0x10>
 854:	82 30       	cpi	r24, 0x02	; 2
 856:	59 f0       	breq	.+22     	; 0x86e <alarm+0x24>
 858:	10 c0       	rjmp	.+32     	; 0x87a <alarm+0x30>
		case init2:
			state2 = alarmOff;
 85a:	81 e0       	ldi	r24, 0x01	; 1
 85c:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <state2>
			break;
 860:	12 c0       	rjmp	.+36     	; 0x886 <alarm+0x3c>
		case alarmOff:
			if(GetBit(PINA, 0) == 1) {
 862:	00 9b       	sbis	0x00, 0	; 0
 864:	10 c0       	rjmp	.+32     	; 0x886 <alarm+0x3c>
				state2 = alarmOn;
 866:	82 e0       	ldi	r24, 0x02	; 2
 868:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <state2>
 86c:	0a c0       	rjmp	.+20     	; 0x882 <alarm+0x38>
			else {
				state2 = alarmOff;
			}
			break;
		case alarmOn:
			if(GetBit(PINA, 0) == 1) {
 86e:	00 99       	sbic	0x00, 0	; 0
 870:	08 c0       	rjmp	.+16     	; 0x882 <alarm+0x38>
				state2 = alarmOn;
			}
			else {
				state2 = alarmOff;
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	80 93 05 02 	sts	0x0205, r24	; 0x800205 <state2>
 878:	06 c0       	rjmp	.+12     	; 0x886 <alarm+0x3c>
			}
			break;
		default:
			state2 = init2;
 87a:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <state2>
			break;
	}
	
	switch(state2) {
		case init2:
			PORTB &= ~(1 << PB0);
 87e:	28 98       	cbi	0x05, 0	; 5
			break;
		default:
			PORTB &= ~(1 << PB0);
			break;
	}
}
 880:	08 95       	ret
			break;
		case alarmOff:
			PORTB &= ~(1 << PB0);
			break;
		case alarmOn:
			PORTB |= (1 << PB0);
 882:	28 9a       	sbi	0x05, 0	; 5
			break;
 884:	08 95       	ret
	switch(state2) {
		case init2:
			PORTB &= ~(1 << PB0);
			break;
		case alarmOff:
			PORTB &= ~(1 << PB0);
 886:	28 98       	cbi	0x05, 0	; 5
 888:	08 95       	ret

0000088a <main>:
			break;
	}
}

int main(void) {
	DDRA = 0x00;	PORTA = 0xFE;
 88a:	11 b8       	out	0x01, r1	; 1
 88c:	8e ef       	ldi	r24, 0xFE	; 254
 88e:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF;	PORTB = 0x00;
 890:	9f ef       	ldi	r25, 0xFF	; 255
 892:	94 b9       	out	0x04, r25	; 4
 894:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 896:	97 b9       	out	0x07, r25	; 7
 898:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFE;	PORTD = 0x01;
 89a:	8a b9       	out	0x0a, r24	; 10
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	8b b9       	out	0x0b, r24	; 11
	
	TimerSet(50);
 8a0:	62 e3       	ldi	r22, 0x32	; 50
 8a2:	70 e0       	ldi	r23, 0x00	; 0
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	17 dc       	rcall	.-2002   	; 0xd8 <TimerSet>
	TimerOn();
 8aa:	27 dc       	rcall	.-1970   	; 0xfa <TimerOn>
 8ac:	10 92 04 02 	sts	0x0204, r1	; 0x800204 <state1>
	
	state1 = init1;
 8b0:	10 92 05 02 	sts	0x0205, r1	; 0x800205 <state2>
	state2 = init2;
	
	LCD_init();
 8b4:	04 dd       	rcall	.-1528   	; 0x2be <LCD_init>
	LCD_ClearScreen();
 8b6:	00 dd       	rcall	.-1536   	; 0x2b8 <LCD_ClearScreen>
	initUSART(0);
 8b8:	80 e0       	ldi	r24, 0x00	; 0
	initUSART(1);
 8ba:	7f dc       	rcall	.-1794   	; 0x1ba <initUSART>
 8bc:	81 e0       	ldi	r24, 0x01	; 1
 8be:	7d dc       	rcall	.-1798   	; 0x1ba <initUSART>
	
    /* Replace with your application code */

    while (1) {
		
		unlock();
 8c0:	5b df       	rcall	.-330    	; 0x778 <unlock>
 8c2:	c3 df       	rcall	.-122    	; 0x84a <alarm>
		alarm();
 8c4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <TimerFlag>
		
		while (!TimerFlag){}
 8c8:	88 23       	and	r24, r24
 8ca:	e1 f3       	breq	.-8      	; 0x8c4 <main+0x3a>
 8cc:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <TimerFlag>
		TimerFlag = 0;
 8d0:	f7 cf       	rjmp	.-18     	; 0x8c0 <main+0x36>

000008d2 <__tablejump2__>:
 8d2:	ee 0f       	add	r30, r30
    }
 8d4:	ff 1f       	adc	r31, r31
 8d6:	00 24       	eor	r0, r0
 8d8:	00 1c       	adc	r0, r0
 8da:	0b be       	out	0x3b, r0	; 59
 8dc:	07 90       	elpm	r0, Z+
 8de:	f6 91       	elpm	r31, Z
 8e0:	e0 2d       	mov	r30, r0
 8e2:	09 94       	ijmp

000008e4 <strcmp>:
 8e4:	fb 01       	movw	r30, r22
 8e6:	dc 01       	movw	r26, r24
 8e8:	8d 91       	ld	r24, X+
 8ea:	01 90       	ld	r0, Z+
 8ec:	80 19       	sub	r24, r0
 8ee:	01 10       	cpse	r0, r1
 8f0:	d9 f3       	breq	.-10     	; 0x8e8 <strcmp+0x4>
 8f2:	99 0b       	sbc	r25, r25
 8f4:	08 95       	ret

000008f6 <_exit>:
 8f6:	f8 94       	cli

000008f8 <__stop_program>:
 8f8:	ff cf       	rjmp	.-2      	; 0x8f8 <__stop_program>
