
MS3_Final.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800100  00000c94  00000d28  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000c94  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004e  00800214  00800214  00000e3c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e3c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00000eb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000026f4  00000000  00000000  00001038  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ad0  00000000  00000000  0000372c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001263  00000000  00000000  000041fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  00005460  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000719  00000000  00000000  00005780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c35  00000000  00000000  00005e99  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006ace  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
   2:	00 00       	nop
   4:	6b c0       	rjmp	.+214    	; 0xdc <__bad_interrupt>
   6:	00 00       	nop
   8:	69 c0       	rjmp	.+210    	; 0xdc <__bad_interrupt>
   a:	00 00       	nop
   c:	67 c0       	rjmp	.+206    	; 0xdc <__bad_interrupt>
   e:	00 00       	nop
  10:	65 c0       	rjmp	.+202    	; 0xdc <__bad_interrupt>
  12:	00 00       	nop
  14:	63 c0       	rjmp	.+198    	; 0xdc <__bad_interrupt>
  16:	00 00       	nop
  18:	61 c0       	rjmp	.+194    	; 0xdc <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5f c0       	rjmp	.+190    	; 0xdc <__bad_interrupt>
  1e:	00 00       	nop
  20:	5d c0       	rjmp	.+186    	; 0xdc <__bad_interrupt>
  22:	00 00       	nop
  24:	5b c0       	rjmp	.+182    	; 0xdc <__bad_interrupt>
  26:	00 00       	nop
  28:	59 c0       	rjmp	.+178    	; 0xdc <__bad_interrupt>
  2a:	00 00       	nop
  2c:	57 c0       	rjmp	.+174    	; 0xdc <__bad_interrupt>
  2e:	00 00       	nop
  30:	55 c0       	rjmp	.+170    	; 0xdc <__bad_interrupt>
  32:	00 00       	nop
  34:	89 c0       	rjmp	.+274    	; 0x148 <__vector_13>
  36:	00 00       	nop
  38:	51 c0       	rjmp	.+162    	; 0xdc <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4f c0       	rjmp	.+158    	; 0xdc <__bad_interrupt>
  3e:	00 00       	nop
  40:	4d c0       	rjmp	.+154    	; 0xdc <__bad_interrupt>
  42:	00 00       	nop
  44:	4b c0       	rjmp	.+150    	; 0xdc <__bad_interrupt>
  46:	00 00       	nop
  48:	49 c0       	rjmp	.+146    	; 0xdc <__bad_interrupt>
  4a:	00 00       	nop
  4c:	47 c0       	rjmp	.+142    	; 0xdc <__bad_interrupt>
  4e:	00 00       	nop
  50:	45 c0       	rjmp	.+138    	; 0xdc <__bad_interrupt>
  52:	00 00       	nop
  54:	43 c0       	rjmp	.+134    	; 0xdc <__bad_interrupt>
  56:	00 00       	nop
  58:	41 c0       	rjmp	.+130    	; 0xdc <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3f c0       	rjmp	.+126    	; 0xdc <__bad_interrupt>
  5e:	00 00       	nop
  60:	3d c0       	rjmp	.+122    	; 0xdc <__bad_interrupt>
  62:	00 00       	nop
  64:	3b c0       	rjmp	.+118    	; 0xdc <__bad_interrupt>
  66:	00 00       	nop
  68:	39 c0       	rjmp	.+114    	; 0xdc <__bad_interrupt>
  6a:	00 00       	nop
  6c:	37 c0       	rjmp	.+110    	; 0xdc <__bad_interrupt>
  6e:	00 00       	nop
  70:	35 c0       	rjmp	.+106    	; 0xdc <__bad_interrupt>
  72:	00 00       	nop
  74:	33 c0       	rjmp	.+102    	; 0xdc <__bad_interrupt>
  76:	00 00       	nop
  78:	31 c0       	rjmp	.+98     	; 0xdc <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2f c0       	rjmp	.+94     	; 0xdc <__bad_interrupt>
  7e:	00 00       	nop
  80:	2d c0       	rjmp	.+90     	; 0xdc <__bad_interrupt>
  82:	00 00       	nop
  84:	2b c0       	rjmp	.+86     	; 0xdc <__bad_interrupt>
  86:	00 00       	nop
  88:	29 c0       	rjmp	.+82     	; 0xdc <__bad_interrupt>
  8a:	00 00       	nop
  8c:	89 04       	cpc	r8, r9
  8e:	8d 04       	cpc	r8, r13
  90:	96 04       	cpc	r9, r6
  92:	bb 04       	cpc	r11, r11
  94:	c6 04       	cpc	r12, r6
  96:	d1 04       	cpc	r13, r1
  98:	dc 04       	cpc	r13, r12
  9a:	e4 04       	cpc	r14, r4
  9c:	f2 04       	cpc	r15, r2
  9e:	0d 05       	cpc	r16, r13
  a0:	2e 05       	cpc	r18, r14

000000a2 <__ctors_end>:
  a2:	11 24       	eor	r1, r1
  a4:	1f be       	out	0x3f, r1	; 63
  a6:	cf ef       	ldi	r28, 0xFF	; 255
  a8:	d0 e4       	ldi	r29, 0x40	; 64
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
  ae:	12 e0       	ldi	r17, 0x02	; 2
  b0:	a0 e0       	ldi	r26, 0x00	; 0
  b2:	b1 e0       	ldi	r27, 0x01	; 1
  b4:	e4 e9       	ldi	r30, 0x94	; 148
  b6:	fc e0       	ldi	r31, 0x0C	; 12
  b8:	00 e0       	ldi	r16, 0x00	; 0
  ba:	0b bf       	out	0x3b, r16	; 59
  bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
  be:	07 90       	elpm	r0, Z+
  c0:	0d 92       	st	X+, r0
  c2:	a4 31       	cpi	r26, 0x14	; 20
  c4:	b1 07       	cpc	r27, r17
  c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
  c8:	22 e0       	ldi	r18, 0x02	; 2
  ca:	a4 e1       	ldi	r26, 0x14	; 20
  cc:	b2 e0       	ldi	r27, 0x02	; 2
  ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
  d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
  d2:	a2 36       	cpi	r26, 0x62	; 98
  d4:	b2 07       	cpc	r27, r18
  d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
  d8:	39 d5       	rcall	.+2674   	; 0xb4c <main>
  da:	da c5       	rjmp	.+2996   	; 0xc90 <_exit>

000000dc <__bad_interrupt>:
  dc:	91 cf       	rjmp	.-222    	; 0x0 <__vectors>

000000de <TimerSet>:
	;
	return SPDR;
}

void SPI_SlaveTransmit(unsigned char send) {
	SPDR = send;
  de:	60 93 16 01 	sts	0x0116, r22	; 0x800116 <_avr_timer_M>
  e2:	70 93 17 01 	sts	0x0117, r23	; 0x800117 <_avr_timer_M+0x1>
  e6:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <_avr_timer_M+0x2>
  ea:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <_avr_timer_M+0x3>
  ee:	60 93 16 02 	sts	0x0216, r22	; 0x800216 <_avr_timer_cntcurr>
  f2:	70 93 17 02 	sts	0x0217, r23	; 0x800217 <_avr_timer_cntcurr+0x1>
  f6:	80 93 18 02 	sts	0x0218, r24	; 0x800218 <_avr_timer_cntcurr+0x2>
  fa:	90 93 19 02 	sts	0x0219, r25	; 0x800219 <_avr_timer_cntcurr+0x3>
  fe:	08 95       	ret

00000100 <TimerOn>:
 100:	8b e0       	ldi	r24, 0x0B	; 11
 102:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
 106:	8d e7       	ldi	r24, 0x7D	; 125
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 10e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 112:	82 e0       	ldi	r24, 0x02	; 2
 114:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
 118:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
 11c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
 120:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_avr_timer_M>
 124:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_avr_timer_M+0x1>
 128:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_avr_timer_M+0x2>
 12c:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_avr_timer_M+0x3>
 130:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_avr_timer_cntcurr>
 134:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_avr_timer_cntcurr+0x1>
 138:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_avr_timer_cntcurr+0x2>
 13c:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_avr_timer_cntcurr+0x3>
 140:	8f b7       	in	r24, 0x3f	; 63
 142:	80 68       	ori	r24, 0x80	; 128
 144:	8f bf       	out	0x3f, r24	; 63
 146:	08 95       	ret

00000148 <__vector_13>:
 148:	1f 92       	push	r1
 14a:	0f 92       	push	r0
 14c:	0f b6       	in	r0, 0x3f	; 63
 14e:	0f 92       	push	r0
 150:	11 24       	eor	r1, r1
 152:	8f 93       	push	r24
 154:	9f 93       	push	r25
 156:	af 93       	push	r26
 158:	bf 93       	push	r27
 15a:	80 91 16 02 	lds	r24, 0x0216	; 0x800216 <_avr_timer_cntcurr>
 15e:	90 91 17 02 	lds	r25, 0x0217	; 0x800217 <_avr_timer_cntcurr+0x1>
 162:	a0 91 18 02 	lds	r26, 0x0218	; 0x800218 <_avr_timer_cntcurr+0x2>
 166:	b0 91 19 02 	lds	r27, 0x0219	; 0x800219 <_avr_timer_cntcurr+0x3>
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	a1 09       	sbc	r26, r1
 16e:	b1 09       	sbc	r27, r1
 170:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_avr_timer_cntcurr>
 174:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_avr_timer_cntcurr+0x1>
 178:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_avr_timer_cntcurr+0x2>
 17c:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_avr_timer_cntcurr+0x3>
 180:	89 2b       	or	r24, r25
 182:	8a 2b       	or	r24, r26
 184:	8b 2b       	or	r24, r27
 186:	99 f4       	brne	.+38     	; 0x1ae <__vector_13+0x66>
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	80 93 1a 02 	sts	0x021A, r24	; 0x80021a <TimerFlag>
 18e:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <_avr_timer_M>
 192:	90 91 17 01 	lds	r25, 0x0117	; 0x800117 <_avr_timer_M+0x1>
 196:	a0 91 18 01 	lds	r26, 0x0118	; 0x800118 <_avr_timer_M+0x2>
 19a:	b0 91 19 01 	lds	r27, 0x0119	; 0x800119 <_avr_timer_M+0x3>
 19e:	80 93 16 02 	sts	0x0216, r24	; 0x800216 <_avr_timer_cntcurr>
 1a2:	90 93 17 02 	sts	0x0217, r25	; 0x800217 <_avr_timer_cntcurr+0x1>
 1a6:	a0 93 18 02 	sts	0x0218, r26	; 0x800218 <_avr_timer_cntcurr+0x2>
 1aa:	b0 93 19 02 	sts	0x0219, r27	; 0x800219 <_avr_timer_cntcurr+0x3>
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	0f 90       	pop	r0
 1b8:	0f be       	out	0x3f, r0	; 63
 1ba:	0f 90       	pop	r0
 1bc:	1f 90       	pop	r1
 1be:	18 95       	reti

000001c0 <initUSART>:
 1c0:	81 30       	cpi	r24, 0x01	; 1
 1c2:	81 f0       	breq	.+32     	; 0x1e4 <initUSART+0x24>
 1c4:	e1 ec       	ldi	r30, 0xC1	; 193
 1c6:	f0 e0       	ldi	r31, 0x00	; 0
 1c8:	80 81       	ld	r24, Z
 1ca:	88 61       	ori	r24, 0x18	; 24
 1cc:	80 83       	st	Z, r24
 1ce:	e2 ec       	ldi	r30, 0xC2	; 194
 1d0:	f0 e0       	ldi	r31, 0x00	; 0
 1d2:	80 81       	ld	r24, Z
 1d4:	86 60       	ori	r24, 0x06	; 6
 1d6:	80 83       	st	Z, r24
 1d8:	83 e3       	ldi	r24, 0x33	; 51
 1da:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 1de:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 1e2:	08 95       	ret
 1e4:	e9 ec       	ldi	r30, 0xC9	; 201
 1e6:	f0 e0       	ldi	r31, 0x00	; 0
 1e8:	80 81       	ld	r24, Z
 1ea:	88 61       	ori	r24, 0x18	; 24
 1ec:	80 83       	st	Z, r24
 1ee:	ea ec       	ldi	r30, 0xCA	; 202
 1f0:	f0 e0       	ldi	r31, 0x00	; 0
 1f2:	80 81       	ld	r24, Z
 1f4:	86 60       	ori	r24, 0x06	; 6
 1f6:	80 83       	st	Z, r24
 1f8:	87 e0       	ldi	r24, 0x07	; 7
 1fa:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 1fe:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 202:	08 95       	ret

00000204 <USART_Flush>:
 204:	81 30       	cpi	r24, 0x01	; 1
 206:	29 f4       	brne	.+10     	; 0x212 <USART_Flush+0xe>
 208:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 20c:	88 23       	and	r24, r24
 20e:	74 f0       	brlt	.+28     	; 0x22c <USART_Flush+0x28>
 210:	08 95       	ret
 212:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 216:	88 23       	and	r24, r24
 218:	8c f4       	brge	.+34     	; 0x23c <USART_Flush+0x38>
 21a:	a6 ec       	ldi	r26, 0xC6	; 198
 21c:	b0 e0       	ldi	r27, 0x00	; 0
 21e:	e0 ec       	ldi	r30, 0xC0	; 192
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	8c 91       	ld	r24, X
 224:	80 81       	ld	r24, Z
 226:	88 23       	and	r24, r24
 228:	e4 f3       	brlt	.-8      	; 0x222 <USART_Flush+0x1e>
 22a:	08 95       	ret
 22c:	ae ec       	ldi	r26, 0xCE	; 206
 22e:	b0 e0       	ldi	r27, 0x00	; 0
 230:	e8 ec       	ldi	r30, 0xC8	; 200
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	8c 91       	ld	r24, X
 236:	80 81       	ld	r24, Z
 238:	88 23       	and	r24, r24
 23a:	e4 f3       	brlt	.-8      	; 0x234 <USART_Flush+0x30>
 23c:	08 95       	ret

0000023e <USART_Send>:
 23e:	61 30       	cpi	r22, 0x01	; 1
 240:	41 f0       	breq	.+16     	; 0x252 <USART_Send+0x14>
 242:	e0 ec       	ldi	r30, 0xC0	; 192
 244:	f0 e0       	ldi	r31, 0x00	; 0
 246:	90 81       	ld	r25, Z
 248:	95 ff       	sbrs	r25, 5
 24a:	fd cf       	rjmp	.-6      	; 0x246 <USART_Send+0x8>
 24c:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 250:	08 95       	ret
 252:	e8 ec       	ldi	r30, 0xC8	; 200
 254:	f0 e0       	ldi	r31, 0x00	; 0
 256:	90 81       	ld	r25, Z
 258:	95 ff       	sbrs	r25, 5
 25a:	fd cf       	rjmp	.-6      	; 0x256 <USART_Send+0x18>
 25c:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 260:	08 95       	ret

00000262 <USART_Receive>:
 262:	81 30       	cpi	r24, 0x01	; 1
 264:	41 f0       	breq	.+16     	; 0x276 <USART_Receive+0x14>
 266:	e0 ec       	ldi	r30, 0xC0	; 192
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	80 81       	ld	r24, Z
 26c:	88 23       	and	r24, r24
 26e:	ec f7       	brge	.-6      	; 0x26a <USART_Receive+0x8>
 270:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 274:	08 95       	ret
 276:	e8 ec       	ldi	r30, 0xC8	; 200
 278:	f0 e0       	ldi	r31, 0x00	; 0
 27a:	80 81       	ld	r24, Z
 27c:	88 23       	and	r24, r24
 27e:	ec f7       	brge	.-6      	; 0x27a <USART_Receive+0x18>
 280:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
 284:	08 95       	ret

00000286 <delay_ms>:
 286:	18 16       	cp	r1, r24
 288:	19 06       	cpc	r1, r25
 28a:	5c f0       	brlt	.+22     	; 0x2a2 <delay_ms+0x1c>
 28c:	08 95       	ret
 28e:	00 00       	nop
 290:	21 50       	subi	r18, 0x01	; 1
 292:	31 09       	sbc	r19, r1
 294:	e1 f7       	brne	.-8      	; 0x28e <delay_ms+0x8>
 296:	4f 5f       	subi	r20, 0xFF	; 255
 298:	5f 4f       	sbci	r21, 0xFF	; 255
 29a:	84 17       	cp	r24, r20
 29c:	95 07       	cpc	r25, r21
 29e:	19 f4       	brne	.+6      	; 0x2a6 <delay_ms+0x20>
 2a0:	08 95       	ret
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	50 e0       	ldi	r21, 0x00	; 0
 2a6:	27 e0       	ldi	r18, 0x07	; 7
 2a8:	33 e0       	ldi	r19, 0x03	; 3
 2aa:	f1 cf       	rjmp	.-30     	; 0x28e <delay_ms+0x8>

000002ac <LCD_WriteCommand>:
 2ac:	5e 98       	cbi	0x0b, 6	; 11
 2ae:	88 b9       	out	0x08, r24	; 8
 2b0:	5f 9a       	sbi	0x0b, 7	; 11
 2b2:	00 00       	nop
 2b4:	5f 98       	cbi	0x0b, 7	; 11
 2b6:	82 e0       	ldi	r24, 0x02	; 2
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	e5 cf       	rjmp	.-54     	; 0x286 <delay_ms>
 2bc:	08 95       	ret

000002be <LCD_ClearScreen>:
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	f5 cf       	rjmp	.-22     	; 0x2ac <LCD_WriteCommand>
 2c2:	08 95       	ret

000002c4 <LCD_init>:
 2c4:	84 e6       	ldi	r24, 0x64	; 100
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	de df       	rcall	.-68     	; 0x286 <delay_ms>
 2ca:	88 e3       	ldi	r24, 0x38	; 56
 2cc:	ef df       	rcall	.-34     	; 0x2ac <LCD_WriteCommand>
 2ce:	86 e0       	ldi	r24, 0x06	; 6
 2d0:	ed df       	rcall	.-38     	; 0x2ac <LCD_WriteCommand>
 2d2:	8f e0       	ldi	r24, 0x0F	; 15
 2d4:	eb df       	rcall	.-42     	; 0x2ac <LCD_WriteCommand>
 2d6:	81 e0       	ldi	r24, 0x01	; 1
 2d8:	e9 df       	rcall	.-46     	; 0x2ac <LCD_WriteCommand>
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	90 e0       	ldi	r25, 0x00	; 0
 2de:	d3 cf       	rjmp	.-90     	; 0x286 <delay_ms>
 2e0:	08 95       	ret

000002e2 <LCD_WriteData>:
 2e2:	5e 9a       	sbi	0x0b, 6	; 11
 2e4:	88 b9       	out	0x08, r24	; 8
 2e6:	5f 9a       	sbi	0x0b, 7	; 11
 2e8:	00 00       	nop
 2ea:	5f 98       	cbi	0x0b, 7	; 11
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	ca cf       	rjmp	.-108    	; 0x286 <delay_ms>
 2f2:	08 95       	ret

000002f4 <LCD_Cursor>:
 2f4:	81 31       	cpi	r24, 0x11	; 17
 2f6:	18 f4       	brcc	.+6      	; 0x2fe <LCD_Cursor+0xa>
 2f8:	81 58       	subi	r24, 0x81	; 129
 2fa:	d8 cf       	rjmp	.-80     	; 0x2ac <LCD_WriteCommand>
 2fc:	08 95       	ret
 2fe:	81 55       	subi	r24, 0x51	; 81
 300:	d5 cf       	rjmp	.-86     	; 0x2ac <LCD_WriteCommand>
 302:	08 95       	ret

00000304 <LCD_DisplayString>:
 304:	1f 93       	push	r17
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	fb 01       	movw	r30, r22
 30c:	90 81       	ld	r25, Z
 30e:	99 23       	and	r25, r25
 310:	51 f0       	breq	.+20     	; 0x326 <LCD_DisplayString+0x22>
 312:	eb 01       	movw	r28, r22
 314:	11 e0       	ldi	r17, 0x01	; 1
 316:	18 0f       	add	r17, r24
 318:	ed df       	rcall	.-38     	; 0x2f4 <LCD_Cursor>
 31a:	89 91       	ld	r24, Y+
 31c:	e2 df       	rcall	.-60     	; 0x2e2 <LCD_WriteData>
 31e:	81 2f       	mov	r24, r17
 320:	98 81       	ld	r25, Y
 322:	91 11       	cpse	r25, r1
 324:	f7 cf       	rjmp	.-18     	; 0x314 <LCD_DisplayString+0x10>
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	1f 91       	pop	r17
 32c:	08 95       	ret

0000032e <SPI_ServantInit>:
 32e:	26 98       	cbi	0x04, 6	; 4
 330:	26 9a       	sbi	0x04, 6	; 4
 332:	80 e4       	ldi	r24, 0x40	; 64
 334:	8c bd       	out	0x2c, r24	; 44
 336:	08 95       	ret

00000338 <SPI_SlaveReceive>:
 338:	0d b4       	in	r0, 0x2d	; 45
 33a:	07 fe       	sbrs	r0, 7
 33c:	fd cf       	rjmp	.-6      	; 0x338 <SPI_SlaveReceive>
 33e:	8e b5       	in	r24, 0x2e	; 46
 340:	08 95       	ret

00000342 <scan_RFID>:
}

void scan_RFID() {
 342:	cf 92       	push	r12
 344:	df 92       	push	r13
 346:	ef 92       	push	r14
 348:	ff 92       	push	r15
 34a:	0f 93       	push	r16
 34c:	1f 93       	push	r17
 34e:	cf 93       	push	r28
 350:	df 93       	push	r29
 352:	0f 2e       	mov	r0, r31
 354:	fb e1       	ldi	r31, 0x1B	; 27
 356:	ef 2e       	mov	r14, r31
 358:	f2 e0       	ldi	r31, 0x02	; 2
 35a:	ff 2e       	mov	r15, r31
 35c:	f0 2d       	mov	r31, r0
 35e:	0b e2       	ldi	r16, 0x2B	; 43
 360:	12 e0       	ldi	r17, 0x02	; 2
 362:	f7 01       	movw	r30, r14
	for(int i = 0; i < 16; i++) {
		RFID[i] = 0;
 364:	11 92       	st	Z+, r1
void SPI_SlaveTransmit(unsigned char send) {
	SPDR = send;
}

void scan_RFID() {
	for(int i = 0; i < 16; i++) {
 366:	e0 17       	cp	r30, r16
 368:	f1 07       	cpc	r31, r17
 36a:	e1 f7       	brne	.-8      	; 0x364 <scan_RFID+0x22>
 36c:	0f 2e       	mov	r0, r31
 36e:	ff e2       	ldi	r31, 0x2F	; 47
 370:	cf 2e       	mov	r12, r31
 372:	f2 e0       	ldi	r31, 0x02	; 2
 374:	df 2e       	mov	r13, r31
 376:	f0 2d       	mov	r31, r0
 378:	89 e3       	ldi	r24, 0x39	; 57
 37a:	92 e0       	ldi	r25, 0x02	; 2
 37c:	f6 01       	movw	r30, r12
		RFID[i] = 0;
	}
	
	for(int i = 0; i < 10; i++) {
		outID[i] = 0;
 37e:	11 92       	st	Z+, r1
void scan_RFID() {
	for(int i = 0; i < 16; i++) {
		RFID[i] = 0;
	}
	
	for(int i = 0; i < 10; i++) {
 380:	8e 17       	cp	r24, r30
 382:	9f 07       	cpc	r25, r31
 384:	e1 f7       	brne	.-8      	; 0x37e <scan_RFID+0x3c>
		outID[i] = 0;
	}
	
	USART_Flush(0);
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	3d df       	rcall	.-390    	; 0x204 <USART_Flush>
 38a:	cb e1       	ldi	r28, 0x1B	; 27
 38c:	d2 e0       	ldi	r29, 0x02	; 2
	// RFID scanner
	for (int i = 0; i < 16; i++) {
		RFID[i] = USART_Receive(0);
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	68 df       	rcall	.-304    	; 0x262 <USART_Receive>
 392:	89 93       	st	Y+, r24
		outID[i] = 0;
	}
	
	USART_Flush(0);
	// RFID scanner
	for (int i = 0; i < 16; i++) {
 394:	c0 17       	cp	r28, r16
 396:	d1 07       	cpc	r29, r17
 398:	d1 f7       	brne	.-12     	; 0x38e <scan_RFID+0x4c>
 39a:	25 e2       	ldi	r18, 0x25	; 37
 39c:	32 e0       	ldi	r19, 0x02	; 2
		RFID[i] = USART_Receive(0);
	}
	
	for (int i = 0; i < 10; i++) {
		outID[i] = RFID[i];
 39e:	f7 01       	movw	r30, r14
 3a0:	81 91       	ld	r24, Z+
 3a2:	7f 01       	movw	r14, r30
 3a4:	f6 01       	movw	r30, r12
 3a6:	81 93       	st	Z+, r24
 3a8:	6f 01       	movw	r12, r30
	// RFID scanner
	for (int i = 0; i < 16; i++) {
		RFID[i] = USART_Receive(0);
	}
	
	for (int i = 0; i < 10; i++) {
 3aa:	2e 15       	cp	r18, r14
 3ac:	3f 05       	cpc	r19, r15
 3ae:	b9 f7       	brne	.-18     	; 0x39e <scan_RFID+0x5c>
		outID[i] = RFID[i];
	}
	
	LCD_DisplayString(17, outID);
 3b0:	6f e2       	ldi	r22, 0x2F	; 47
 3b2:	72 e0       	ldi	r23, 0x02	; 2
 3b4:	81 e1       	ldi	r24, 0x11	; 17
 3b6:	a6 df       	rcall	.-180    	; 0x304 <LCD_DisplayString>
}
 3b8:	df 91       	pop	r29
 3ba:	cf 91       	pop	r28
 3bc:	1f 91       	pop	r17
 3be:	0f 91       	pop	r16
 3c0:	ff 90       	pop	r15
 3c2:	ef 90       	pop	r14
 3c4:	df 90       	pop	r13
 3c6:	cf 90       	pop	r12
 3c8:	08 95       	ret

000003ca <save_RFID>:

void save_RFID(int n) {
 3ca:	cf 92       	push	r12
 3cc:	df 92       	push	r13
 3ce:	ef 92       	push	r14
 3d0:	ff 92       	push	r15
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	cf 93       	push	r28
 3d8:	df 93       	push	r29
 3da:	0f 2e       	mov	r0, r31
 3dc:	f6 e4       	ldi	r31, 0x46	; 70
 3de:	ef 2e       	mov	r14, r31
 3e0:	f2 e0       	ldi	r31, 0x02	; 2
 3e2:	ff 2e       	mov	r15, r31
 3e4:	f0 2d       	mov	r31, r0
 3e6:	06 e5       	ldi	r16, 0x56	; 86
 3e8:	12 e0       	ldi	r17, 0x02	; 2
 3ea:	f7 01       	movw	r30, r14
	for(int i = 0; i < 16; i++) {
		saveRFID[i] = 0;
 3ec:	11 92       	st	Z+, r1
	
	LCD_DisplayString(17, outID);
}

void save_RFID(int n) {
	for(int i = 0; i < 16; i++) {
 3ee:	e0 17       	cp	r30, r16
 3f0:	f1 07       	cpc	r31, r17
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <save_RFID+0x22>
 3f4:	0f 2e       	mov	r0, r31
 3f6:	fa e3       	ldi	r31, 0x3A	; 58
 3f8:	cf 2e       	mov	r12, r31
 3fa:	f2 e0       	ldi	r31, 0x02	; 2
 3fc:	df 2e       	mov	r13, r31
 3fe:	f0 2d       	mov	r31, r0
 400:	84 e4       	ldi	r24, 0x44	; 68
 402:	92 e0       	ldi	r25, 0x02	; 2
 404:	f6 01       	movw	r30, r12
		saveRFID[i] = 0;
	}
	
	for(int i = 0; i < 10; i++) {
		saveOutID[i] = 0;
 406:	11 92       	st	Z+, r1
void save_RFID(int n) {
	for(int i = 0; i < 16; i++) {
		saveRFID[i] = 0;
	}
	
	for(int i = 0; i < 10; i++) {
 408:	8e 17       	cp	r24, r30
 40a:	9f 07       	cpc	r25, r31
 40c:	e1 f7       	brne	.-8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
		saveOutID[i] = 0;
	}
	
	USART_Flush(0);
 40e:	80 e0       	ldi	r24, 0x00	; 0
 410:	f9 de       	rcall	.-526    	; 0x204 <USART_Flush>
 412:	c6 e4       	ldi	r28, 0x46	; 70
 414:	d2 e0       	ldi	r29, 0x02	; 2
	// RFID scanner
	for (int i = 0; i < 16; i++) {
		saveRFID[i] = USART_Receive(0);
 416:	80 e0       	ldi	r24, 0x00	; 0
 418:	24 df       	rcall	.-440    	; 0x262 <USART_Receive>
 41a:	89 93       	st	Y+, r24
		saveOutID[i] = 0;
	}
	
	USART_Flush(0);
	// RFID scanner
	for (int i = 0; i < 16; i++) {
 41c:	c0 17       	cp	r28, r16
 41e:	d1 07       	cpc	r29, r17
 420:	d1 f7       	brne	.-12     	; 0x416 <__LOCK_REGION_LENGTH__+0x16>
 422:	20 e5       	ldi	r18, 0x50	; 80
 424:	32 e0       	ldi	r19, 0x02	; 2
		saveRFID[i] = USART_Receive(0);
	}
	
	for (int i = 0; i < 10; i++) {
		saveOutID[i] = saveRFID[i];
 426:	f7 01       	movw	r30, r14
 428:	81 91       	ld	r24, Z+
 42a:	7f 01       	movw	r14, r30
 42c:	f6 01       	movw	r30, r12
 42e:	81 93       	st	Z+, r24
 430:	6f 01       	movw	r12, r30
	// RFID scanner
	for (int i = 0; i < 16; i++) {
		saveRFID[i] = USART_Receive(0);
	}
	
	for (int i = 0; i < 10; i++) {
 432:	2e 15       	cp	r18, r14
 434:	3f 05       	cpc	r19, r15
 436:	b9 f7       	brne	.-18     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
		saveOutID[i] = saveRFID[i];
	}
	eeprom_busy_wait();		/* Initialize LCD */
 438:	f9 99       	sbic	0x1f, 1	; 31
 43a:	fe cf       	rjmp	.-4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	eeprom_write_block(saveOutID,1,strlen(saveOutID));
 43c:	ea e3       	ldi	r30, 0x3A	; 58
 43e:	f2 e0       	ldi	r31, 0x02	; 2
 440:	01 90       	ld	r0, Z+
 442:	00 20       	and	r0, r0
 444:	e9 f7       	brne	.-6      	; 0x440 <__LOCK_REGION_LENGTH__+0x40>
 446:	31 97       	sbiw	r30, 0x01	; 1
 448:	af 01       	movw	r20, r30
 44a:	4a 53       	subi	r20, 0x3A	; 58
 44c:	52 40       	sbci	r21, 0x02	; 2
 44e:	61 e0       	ldi	r22, 0x01	; 1
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	8a e3       	ldi	r24, 0x3A	; 58
 454:	92 e0       	ldi	r25, 0x02	; 2
 456:	05 d4       	rcall	.+2058   	; 0xc62 <eeprom_write_block>
}
 458:	df 91       	pop	r29
 45a:	cf 91       	pop	r28
 45c:	1f 91       	pop	r17
 45e:	0f 91       	pop	r16
 460:	ff 90       	pop	r15
 462:	ef 90       	pop	r14
 464:	df 90       	pop	r13
 466:	cf 90       	pop	r12
 468:	08 95       	ret

0000046a <read_finger_1>:

void read_finger_1()  {        //for char_buffer1
 46a:	ef 92       	push	r14
 46c:	ff 92       	push	r15
 46e:	0f 93       	push	r16
 470:	1f 93       	push	r17
 472:	cf 93       	push	r28
 474:	df 93       	push	r29
//Functionality - checks if USART is ready to send
//Parameter: usartNum specifies which USART is checked
//Returns: 1 if true else 0
unsigned char USART_IsSendReady(unsigned char usartNum)
{
	return (usartNum != 1) ? (UCSR0A & (1 << UDRE0)) : (UCSR1A & (1 << UDRE1));
 476:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
	if(USART_IsSendReady(1)) {
 47a:	85 ff       	sbrs	r24, 5
 47c:	85 c0       	rjmp	.+266    	; 0x588 <read_finger_1+0x11e>
		LCD_DisplayString(1, "Scanning........");
 47e:	6a e1       	ldi	r22, 0x1A	; 26
 480:	71 e0       	ldi	r23, 0x01	; 1
 482:	81 e0       	ldi	r24, 0x01	; 1
 484:	3f df       	rcall	.-386    	; 0x304 <LCD_DisplayString>
		LCD_DisplayString(17, "Reading finger 1");
 486:	6b e2       	ldi	r22, 0x2B	; 43
 488:	71 e0       	ldi	r23, 0x01	; 1
 48a:	81 e1       	ldi	r24, 0x11	; 17
 48c:	3b df       	rcall	.-394    	; 0x304 <LCD_DisplayString>
		int i = 0;
		char k = 1, ch = 1;
		USART_Flush(1);
 48e:	81 e0       	ldi	r24, 0x01	; 1
 490:	b9 de       	rcall	.-654    	; 0x204 <USART_Flush>
		
		USART_Send(239, 1);
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	8f ee       	ldi	r24, 0xEF	; 239
 496:	d3 de       	rcall	.-602    	; 0x23e <USART_Send>
		USART_Send(1, 1);
 498:	61 e0       	ldi	r22, 0x01	; 1
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	d0 de       	rcall	.-608    	; 0x23e <USART_Send>
		USART_Send(255, 1);
 49e:	61 e0       	ldi	r22, 0x01	; 1
 4a0:	8f ef       	ldi	r24, 0xFF	; 255
 4a2:	cd de       	rcall	.-614    	; 0x23e <USART_Send>
		USART_Send(255, 1);
 4a4:	61 e0       	ldi	r22, 0x01	; 1
 4a6:	8f ef       	ldi	r24, 0xFF	; 255
 4a8:	ca de       	rcall	.-620    	; 0x23e <USART_Send>
		USART_Send(255, 1);
 4aa:	61 e0       	ldi	r22, 0x01	; 1
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	c7 de       	rcall	.-626    	; 0x23e <USART_Send>
		USART_Send(255, 1);
 4b0:	61 e0       	ldi	r22, 0x01	; 1
 4b2:	8f ef       	ldi	r24, 0xFF	; 255
 4b4:	c4 de       	rcall	.-632    	; 0x23e <USART_Send>
		USART_Send(1, 1);
 4b6:	61 e0       	ldi	r22, 0x01	; 1
 4b8:	81 e0       	ldi	r24, 0x01	; 1
 4ba:	c1 de       	rcall	.-638    	; 0x23e <USART_Send>
		USART_Send(0, 1);
 4bc:	61 e0       	ldi	r22, 0x01	; 1
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	be de       	rcall	.-644    	; 0x23e <USART_Send>
		USART_Send(3, 1);
 4c2:	61 e0       	ldi	r22, 0x01	; 1
 4c4:	83 e0       	ldi	r24, 0x03	; 3
		USART_Send(1, 1);
 4c6:	bb de       	rcall	.-650    	; 0x23e <USART_Send>
 4c8:	61 e0       	ldi	r22, 0x01	; 1
 4ca:	81 e0       	ldi	r24, 0x01	; 1
 4cc:	b8 de       	rcall	.-656    	; 0x23e <USART_Send>
		USART_Send(0, 1);
 4ce:	61 e0       	ldi	r22, 0x01	; 1
 4d0:	80 e0       	ldi	r24, 0x00	; 0
 4d2:	b5 de       	rcall	.-662    	; 0x23e <USART_Send>
		USART_Send(5, 1);
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	85 e0       	ldi	r24, 0x05	; 5
 4d8:	b2 de       	rcall	.-668    	; 0x23e <USART_Send>
 4da:	81 e0       	ldi	r24, 0x01	; 1

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 4dc:	c2 de       	rcall	.-636    	; 0x262 <USART_Receive>
 4de:	c0 e0       	ldi	r28, 0x00	; 0
		USART_Send(3, 1);
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
 4e0:	d0 e0       	ldi	r29, 0x00	; 0
 4e2:	e1 2c       	mov	r14, r1
					USART_Send(1, 1);
					USART_Send(0, 1);
					USART_Send(8, 1);
					i = 0;

					for(i = 0; i < 10; i++) {
 4e4:	f1 2c       	mov	r15, r1
 4e6:	4b c0       	rjmp	.+150    	; 0x57e <read_finger_1+0x114>
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	bb de       	rcall	.-650    	; 0x262 <USART_Receive>
 4ec:	18 2f       	mov	r17, r24
			if(i == 9) {
 4ee:	c9 30       	cpi	r28, 0x09	; 9
 4f0:	d1 05       	cpc	r29, r1
 4f2:	09 f0       	breq	.+2      	; 0x4f6 <read_finger_1+0x8c>
				ch = k;
				k = USART_Receive(1);
 4f4:	44 c0       	rjmp	.+136    	; 0x57e <read_finger_1+0x114>
 4f6:	81 e0       	ldi	r24, 0x01	; 1
				k = USART_Receive(1);
 4f8:	b4 de       	rcall	.-664    	; 0x262 <USART_Receive>
 4fa:	81 e0       	ldi	r24, 0x01	; 1

				if(ch == 0x00) {
 4fc:	b2 de       	rcall	.-668    	; 0x262 <USART_Receive>
 4fe:	11 11       	cpse	r17, r1
					//PORTA |= (1<<0);
					USART_Flush(1);
 500:	43 c0       	rjmp	.+134    	; 0x588 <read_finger_1+0x11e>
 502:	81 e0       	ldi	r24, 0x01	; 1
					k = 1;
					
					USART_Send(239, 1);
 504:	7f de       	rcall	.-770    	; 0x204 <USART_Flush>
 506:	61 e0       	ldi	r22, 0x01	; 1
 508:	8f ee       	ldi	r24, 0xEF	; 239
					USART_Send(1, 1);
 50a:	99 de       	rcall	.-718    	; 0x23e <USART_Send>
 50c:	61 e0       	ldi	r22, 0x01	; 1
 50e:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(255, 1);
 510:	96 de       	rcall	.-724    	; 0x23e <USART_Send>
 512:	61 e0       	ldi	r22, 0x01	; 1
 514:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 516:	93 de       	rcall	.-730    	; 0x23e <USART_Send>
 518:	61 e0       	ldi	r22, 0x01	; 1
 51a:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 51c:	90 de       	rcall	.-736    	; 0x23e <USART_Send>
 51e:	61 e0       	ldi	r22, 0x01	; 1
 520:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 522:	8d de       	rcall	.-742    	; 0x23e <USART_Send>
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(1, 1);
 528:	8a de       	rcall	.-748    	; 0x23e <USART_Send>
 52a:	61 e0       	ldi	r22, 0x01	; 1
 52c:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(0, 1);
 52e:	87 de       	rcall	.-754    	; 0x23e <USART_Send>
 530:	61 e0       	ldi	r22, 0x01	; 1
 532:	80 e0       	ldi	r24, 0x00	; 0
 534:	84 de       	rcall	.-760    	; 0x23e <USART_Send>
					USART_Send(4, 1);
 536:	61 e0       	ldi	r22, 0x01	; 1
 538:	84 e0       	ldi	r24, 0x04	; 4
 53a:	81 de       	rcall	.-766    	; 0x23e <USART_Send>
					USART_Send(2, 1);
 53c:	61 e0       	ldi	r22, 0x01	; 1
 53e:	82 e0       	ldi	r24, 0x02	; 2
 540:	7e de       	rcall	.-772    	; 0x23e <USART_Send>
 542:	61 e0       	ldi	r22, 0x01	; 1
					USART_Send(1, 1);
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	7b de       	rcall	.-778    	; 0x23e <USART_Send>
 548:	61 e0       	ldi	r22, 0x01	; 1
 54a:	80 e0       	ldi	r24, 0x00	; 0
					USART_Send(0, 1);
 54c:	78 de       	rcall	.-784    	; 0x23e <USART_Send>
 54e:	61 e0       	ldi	r22, 0x01	; 1
 550:	88 e0       	ldi	r24, 0x08	; 8
					USART_Send(8, 1);
 552:	75 de       	rcall	.-790    	; 0x23e <USART_Send>
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	85 de       	rcall	.-758    	; 0x262 <USART_Receive>
 558:	ce 2d       	mov	r28, r14
					i = 0;

					for(i = 0; i < 10; i++) {
						k = USART_Receive(1);
 55a:	df 2d       	mov	r29, r15
 55c:	06 c0       	rjmp	.+12     	; 0x56a <read_finger_1+0x100>
 55e:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(1, 1);
					USART_Send(0, 1);
					USART_Send(8, 1);
					i = 0;

					for(i = 0; i < 10; i++) {
 560:	80 de       	rcall	.-768    	; 0x262 <USART_Receive>
 562:	81 e0       	ldi	r24, 0x01	; 1
 564:	7e de       	rcall	.-772    	; 0x262 <USART_Receive>
						k = USART_Receive(1);

						if(i == 9) {
							ch = k;
							k = USART_Receive(1);
 566:	22 96       	adiw	r28, 0x02	; 2
 568:	0a c0       	rjmp	.+20     	; 0x57e <read_finger_1+0x114>
 56a:	8e 01       	movw	r16, r28
							k = USART_Receive(1);
 56c:	0f 5f       	subi	r16, 0xFF	; 255
 56e:	1f 4f       	sbci	r17, 0xFF	; 255
 570:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(1, 1);
					USART_Send(0, 1);
					USART_Send(8, 1);
					i = 0;

					for(i = 0; i < 10; i++) {
 572:	77 de       	rcall	.-786    	; 0x262 <USART_Receive>
 574:	09 30       	cpi	r16, 0x09	; 9
 576:	11 05       	cpc	r17, r1
 578:	91 f3       	breq	.-28     	; 0x55e <read_finger_1+0xf4>
 57a:	e8 01       	movw	r28, r16
						k = USART_Receive(1);
 57c:	f6 cf       	rjmp	.-20     	; 0x56a <read_finger_1+0x100>
 57e:	21 96       	adiw	r28, 0x01	; 1
 580:	ca 30       	cpi	r28, 0x0A	; 10

						if(i == 9) {
 582:	d1 05       	cpc	r29, r1
 584:	0c f4       	brge	.+2      	; 0x588 <read_finger_1+0x11e>
 586:	b0 cf       	rjmp	.-160    	; 0x4e8 <read_finger_1+0x7e>
					USART_Send(1, 1);
					USART_Send(0, 1);
					USART_Send(8, 1);
					i = 0;

					for(i = 0; i < 10; i++) {
 588:	88 ee       	ldi	r24, 0xE8	; 232
 58a:	93 e0       	ldi	r25, 0x03	; 3
		USART_Send(3, 1);
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
 58c:	7c de       	rcall	.-776    	; 0x286 <delay_ms>
 58e:	df 91       	pop	r29
 590:	cf 91       	pop	r28
 592:	1f 91       	pop	r17
 594:	0f 91       	pop	r16
					}
				}
			}
		}
	}
	delay_ms(1000);
 596:	ff 90       	pop	r15
 598:	ef 90       	pop	r14
 59a:	08 95       	ret

0000059c <read_finger_2>:
 59c:	ef 92       	push	r14
}
 59e:	ff 92       	push	r15
 5a0:	0f 93       	push	r16
 5a2:	1f 93       	push	r17
 5a4:	cf 93       	push	r28
 5a6:	df 93       	push	r29
 5a8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

void read_finger_2() {         //for char_buffer2
	if(USART_IsSendReady(1)) {
 5ac:	85 ff       	sbrs	r24, 5
 5ae:	85 c0       	rjmp	.+266    	; 0x6ba <read_finger_2+0x11e>
		LCD_DisplayString(1, "Scanning........");
 5b0:	6a e1       	ldi	r22, 0x1A	; 26
 5b2:	71 e0       	ldi	r23, 0x01	; 1
 5b4:	81 e0       	ldi	r24, 0x01	; 1
 5b6:	a6 de       	rcall	.-692    	; 0x304 <LCD_DisplayString>
		LCD_DisplayString(17, "Reading finger 2");
 5b8:	6c e3       	ldi	r22, 0x3C	; 60
 5ba:	71 e0       	ldi	r23, 0x01	; 1
 5bc:	81 e1       	ldi	r24, 0x11	; 17
 5be:	a2 de       	rcall	.-700    	; 0x304 <LCD_DisplayString>
		int i = 0;
		char k = 1, ch = 1;
		USART_Flush(1);
 5c0:	81 e0       	ldi	r24, 0x01	; 1
 5c2:	20 de       	rcall	.-960    	; 0x204 <USART_Flush>
		
		USART_Send(239, 1);
 5c4:	61 e0       	ldi	r22, 0x01	; 1
 5c6:	8f ee       	ldi	r24, 0xEF	; 239
 5c8:	3a de       	rcall	.-908    	; 0x23e <USART_Send>
		USART_Send(1, 1);
 5ca:	61 e0       	ldi	r22, 0x01	; 1
 5cc:	81 e0       	ldi	r24, 0x01	; 1
 5ce:	37 de       	rcall	.-914    	; 0x23e <USART_Send>
		USART_Send(255, 1);
 5d0:	61 e0       	ldi	r22, 0x01	; 1
 5d2:	8f ef       	ldi	r24, 0xFF	; 255
 5d4:	34 de       	rcall	.-920    	; 0x23e <USART_Send>
		USART_Send(255, 1);
 5d6:	61 e0       	ldi	r22, 0x01	; 1
 5d8:	8f ef       	ldi	r24, 0xFF	; 255
 5da:	31 de       	rcall	.-926    	; 0x23e <USART_Send>
		USART_Send(255, 1);
 5dc:	61 e0       	ldi	r22, 0x01	; 1
 5de:	8f ef       	ldi	r24, 0xFF	; 255
 5e0:	2e de       	rcall	.-932    	; 0x23e <USART_Send>
		USART_Send(255, 1);
 5e2:	61 e0       	ldi	r22, 0x01	; 1
 5e4:	8f ef       	ldi	r24, 0xFF	; 255
 5e6:	2b de       	rcall	.-938    	; 0x23e <USART_Send>
		USART_Send(1, 1);
 5e8:	61 e0       	ldi	r22, 0x01	; 1
 5ea:	81 e0       	ldi	r24, 0x01	; 1
 5ec:	28 de       	rcall	.-944    	; 0x23e <USART_Send>
		USART_Send(0, 1);
 5ee:	61 e0       	ldi	r22, 0x01	; 1
 5f0:	80 e0       	ldi	r24, 0x00	; 0
 5f2:	25 de       	rcall	.-950    	; 0x23e <USART_Send>
		USART_Send(3, 1);
 5f4:	61 e0       	ldi	r22, 0x01	; 1
 5f6:	83 e0       	ldi	r24, 0x03	; 3
		USART_Send(1, 1);
 5f8:	22 de       	rcall	.-956    	; 0x23e <USART_Send>
 5fa:	61 e0       	ldi	r22, 0x01	; 1
 5fc:	81 e0       	ldi	r24, 0x01	; 1
 5fe:	1f de       	rcall	.-962    	; 0x23e <USART_Send>
		USART_Send(0, 1);
 600:	61 e0       	ldi	r22, 0x01	; 1
 602:	80 e0       	ldi	r24, 0x00	; 0
 604:	1c de       	rcall	.-968    	; 0x23e <USART_Send>
		USART_Send(5, 1);
 606:	61 e0       	ldi	r22, 0x01	; 1
 608:	85 e0       	ldi	r24, 0x05	; 5
 60a:	19 de       	rcall	.-974    	; 0x23e <USART_Send>
 60c:	81 e0       	ldi	r24, 0x01	; 1

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 60e:	29 de       	rcall	.-942    	; 0x262 <USART_Receive>
 610:	c0 e0       	ldi	r28, 0x00	; 0
		USART_Send(3, 1);
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
 612:	d0 e0       	ldi	r29, 0x00	; 0
 614:	e1 2c       	mov	r14, r1
					USART_Send(2, 1);
					USART_Send(2, 1);
					USART_Send(0, 1);
					USART_Send(9, 1);
					i = 0;
					for(i = 0; i < 10; i++) {
 616:	f1 2c       	mov	r15, r1
 618:	4b c0       	rjmp	.+150    	; 0x6b0 <read_finger_2+0x114>
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	22 de       	rcall	.-956    	; 0x262 <USART_Receive>
 61e:	18 2f       	mov	r17, r24
			if(i == 9) {
 620:	c9 30       	cpi	r28, 0x09	; 9
 622:	d1 05       	cpc	r29, r1
 624:	09 f0       	breq	.+2      	; 0x628 <read_finger_2+0x8c>
				ch = k;
				k = USART_Receive(1);
 626:	44 c0       	rjmp	.+136    	; 0x6b0 <read_finger_2+0x114>
 628:	81 e0       	ldi	r24, 0x01	; 1
				k = USART_Receive(1);
 62a:	1b de       	rcall	.-970    	; 0x262 <USART_Receive>
 62c:	81 e0       	ldi	r24, 0x01	; 1
				if(ch == 0x00) {
 62e:	19 de       	rcall	.-974    	; 0x262 <USART_Receive>
 630:	11 11       	cpse	r17, r1
					//PORTA |= (1<<2);
					k = 1;
					USART_Flush(1);
 632:	43 c0       	rjmp	.+134    	; 0x6ba <read_finger_2+0x11e>
 634:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(239, 1);
 636:	e6 dd       	rcall	.-1076   	; 0x204 <USART_Flush>
 638:	61 e0       	ldi	r22, 0x01	; 1
 63a:	8f ee       	ldi	r24, 0xEF	; 239
					USART_Send(1, 1);
 63c:	00 de       	rcall	.-1024   	; 0x23e <USART_Send>
 63e:	61 e0       	ldi	r22, 0x01	; 1
 640:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(255, 1);
 642:	fd dd       	rcall	.-1030   	; 0x23e <USART_Send>
 644:	61 e0       	ldi	r22, 0x01	; 1
 646:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 648:	fa dd       	rcall	.-1036   	; 0x23e <USART_Send>
 64a:	61 e0       	ldi	r22, 0x01	; 1
 64c:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 64e:	f7 dd       	rcall	.-1042   	; 0x23e <USART_Send>
 650:	61 e0       	ldi	r22, 0x01	; 1
 652:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(255, 1);
 654:	f4 dd       	rcall	.-1048   	; 0x23e <USART_Send>
 656:	61 e0       	ldi	r22, 0x01	; 1
 658:	8f ef       	ldi	r24, 0xFF	; 255
					USART_Send(1, 1);
 65a:	f1 dd       	rcall	.-1054   	; 0x23e <USART_Send>
 65c:	61 e0       	ldi	r22, 0x01	; 1
 65e:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(0, 1);
 660:	ee dd       	rcall	.-1060   	; 0x23e <USART_Send>
 662:	61 e0       	ldi	r22, 0x01	; 1
 664:	80 e0       	ldi	r24, 0x00	; 0
 666:	eb dd       	rcall	.-1066   	; 0x23e <USART_Send>
					USART_Send(4, 1);
 668:	61 e0       	ldi	r22, 0x01	; 1
 66a:	84 e0       	ldi	r24, 0x04	; 4
 66c:	e8 dd       	rcall	.-1072   	; 0x23e <USART_Send>
					USART_Send(2, 1);
 66e:	61 e0       	ldi	r22, 0x01	; 1
 670:	82 e0       	ldi	r24, 0x02	; 2
 672:	e5 dd       	rcall	.-1078   	; 0x23e <USART_Send>
 674:	61 e0       	ldi	r22, 0x01	; 1
					USART_Send(2, 1);
 676:	82 e0       	ldi	r24, 0x02	; 2
 678:	e2 dd       	rcall	.-1084   	; 0x23e <USART_Send>
 67a:	61 e0       	ldi	r22, 0x01	; 1
 67c:	80 e0       	ldi	r24, 0x00	; 0
					USART_Send(0, 1);
 67e:	df dd       	rcall	.-1090   	; 0x23e <USART_Send>
 680:	61 e0       	ldi	r22, 0x01	; 1
 682:	89 e0       	ldi	r24, 0x09	; 9
					USART_Send(9, 1);
 684:	dc dd       	rcall	.-1096   	; 0x23e <USART_Send>
 686:	81 e0       	ldi	r24, 0x01	; 1
 688:	ec dd       	rcall	.-1064   	; 0x262 <USART_Receive>
 68a:	ce 2d       	mov	r28, r14
					i = 0;
					for(i = 0; i < 10; i++) {
						k = USART_Receive(1);
 68c:	df 2d       	mov	r29, r15
 68e:	06 c0       	rjmp	.+12     	; 0x69c <read_finger_2+0x100>
 690:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(2, 1);
					USART_Send(2, 1);
					USART_Send(0, 1);
					USART_Send(9, 1);
					i = 0;
					for(i = 0; i < 10; i++) {
 692:	e7 dd       	rcall	.-1074   	; 0x262 <USART_Receive>
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	e5 dd       	rcall	.-1078   	; 0x262 <USART_Receive>
						k = USART_Receive(1);
						if(i == 9) {
							ch = k;
							k = USART_Receive(1);
 698:	22 96       	adiw	r28, 0x02	; 2
 69a:	0a c0       	rjmp	.+20     	; 0x6b0 <read_finger_2+0x114>
 69c:	8e 01       	movw	r16, r28
							k = USART_Receive(1);
 69e:	0f 5f       	subi	r16, 0xFF	; 255
 6a0:	1f 4f       	sbci	r17, 0xFF	; 255
 6a2:	81 e0       	ldi	r24, 0x01	; 1
					USART_Send(2, 1);
					USART_Send(2, 1);
					USART_Send(0, 1);
					USART_Send(9, 1);
					i = 0;
					for(i = 0; i < 10; i++) {
 6a4:	de dd       	rcall	.-1092   	; 0x262 <USART_Receive>
 6a6:	09 30       	cpi	r16, 0x09	; 9
 6a8:	11 05       	cpc	r17, r1
 6aa:	91 f3       	breq	.-28     	; 0x690 <read_finger_2+0xf4>
 6ac:	e8 01       	movw	r28, r16
						k = USART_Receive(1);
 6ae:	f6 cf       	rjmp	.-20     	; 0x69c <read_finger_2+0x100>
 6b0:	21 96       	adiw	r28, 0x01	; 1
 6b2:	ca 30       	cpi	r28, 0x0A	; 10
						if(i == 9) {
 6b4:	d1 05       	cpc	r29, r1
 6b6:	0c f4       	brge	.+2      	; 0x6ba <read_finger_2+0x11e>
 6b8:	b0 cf       	rjmp	.-160    	; 0x61a <read_finger_2+0x7e>
					USART_Send(2, 1);
					USART_Send(2, 1);
					USART_Send(0, 1);
					USART_Send(9, 1);
					i = 0;
					for(i = 0; i < 10; i++) {
 6ba:	88 ee       	ldi	r24, 0xE8	; 232
 6bc:	93 e0       	ldi	r25, 0x03	; 3
		USART_Send(3, 1);
		USART_Send(1, 1);
		USART_Send(0, 1);
		USART_Send(5, 1);

		for(i = 0; i < 10; i++) {
 6be:	e3 dd       	rcall	.-1082   	; 0x286 <delay_ms>
 6c0:	df 91       	pop	r29
 6c2:	cf 91       	pop	r28
 6c4:	1f 91       	pop	r17
 6c6:	0f 91       	pop	r16
					}
				}
			}
		}
	}
	delay_ms(1000);
 6c8:	ff 90       	pop	r15
 6ca:	ef 90       	pop	r14
 6cc:	08 95       	ret

000006ce <make_template>:
 6ce:	cf 93       	push	r28
}
 6d0:	df 93       	push	r29
 6d2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
 6d6:	85 ff       	sbrs	r24, 5
 6d8:	39 c0       	rjmp	.+114    	; 0x74c <make_template+0x7e>
 6da:	6d e4       	ldi	r22, 0x4D	; 77
 6dc:	71 e0       	ldi	r23, 0x01	; 1


void make_template() {
	if(USART_IsSendReady(1)) {
		LCD_DisplayString(17, "Making template");
 6de:	81 e1       	ldi	r24, 0x11	; 17
 6e0:	11 de       	rcall	.-990    	; 0x304 <LCD_DisplayString>
		int i = 0;
		char k = 1, ch = 1;
		USART_Flush(1);
 6e2:	81 e0       	ldi	r24, 0x01	; 1
 6e4:	8f dd       	rcall	.-1250   	; 0x204 <USART_Flush>
		k = 1;
		USART_Send(239, 1);
 6e6:	61 e0       	ldi	r22, 0x01	; 1
 6e8:	8f ee       	ldi	r24, 0xEF	; 239
 6ea:	a9 dd       	rcall	.-1198   	; 0x23e <USART_Send>
		USART_Send(1, 1);
 6ec:	61 e0       	ldi	r22, 0x01	; 1
 6ee:	81 e0       	ldi	r24, 0x01	; 1
 6f0:	a6 dd       	rcall	.-1204   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 6f2:	61 e0       	ldi	r22, 0x01	; 1
 6f4:	8f ef       	ldi	r24, 0xFF	; 255
 6f6:	a3 dd       	rcall	.-1210   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 6f8:	61 e0       	ldi	r22, 0x01	; 1
 6fa:	8f ef       	ldi	r24, 0xFF	; 255
 6fc:	a0 dd       	rcall	.-1216   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 6fe:	61 e0       	ldi	r22, 0x01	; 1
 700:	8f ef       	ldi	r24, 0xFF	; 255
 702:	9d dd       	rcall	.-1222   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 704:	61 e0       	ldi	r22, 0x01	; 1
 706:	8f ef       	ldi	r24, 0xFF	; 255
 708:	9a dd       	rcall	.-1228   	; 0x23e <USART_Send>
		USART_Send(1, 1);
 70a:	61 e0       	ldi	r22, 0x01	; 1
 70c:	81 e0       	ldi	r24, 0x01	; 1
 70e:	97 dd       	rcall	.-1234   	; 0x23e <USART_Send>
		USART_Send(0, 1);
 710:	61 e0       	ldi	r22, 0x01	; 1
 712:	80 e0       	ldi	r24, 0x00	; 0
 714:	94 dd       	rcall	.-1240   	; 0x23e <USART_Send>
		USART_Send(3, 1);
 716:	61 e0       	ldi	r22, 0x01	; 1
 718:	83 e0       	ldi	r24, 0x03	; 3
 71a:	91 dd       	rcall	.-1246   	; 0x23e <USART_Send>
		USART_Send(5, 1);
 71c:	61 e0       	ldi	r22, 0x01	; 1
 71e:	85 e0       	ldi	r24, 0x05	; 5
 720:	8e dd       	rcall	.-1252   	; 0x23e <USART_Send>
 722:	61 e0       	ldi	r22, 0x01	; 1
		USART_Send(0, 1);
 724:	80 e0       	ldi	r24, 0x00	; 0
 726:	8b dd       	rcall	.-1258   	; 0x23e <USART_Send>
		USART_Send(9, 1);
 728:	61 e0       	ldi	r22, 0x01	; 1
 72a:	89 e0       	ldi	r24, 0x09	; 9
 72c:	88 dd       	rcall	.-1264   	; 0x23e <USART_Send>

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 72e:	81 e0       	ldi	r24, 0x01	; 1
 730:	98 dd       	rcall	.-1232   	; 0x262 <USART_Receive>
 732:	c9 e0       	ldi	r28, 0x09	; 9
 734:	d0 e0       	ldi	r29, 0x00	; 0
 736:	05 c0       	rjmp	.+10     	; 0x742 <make_template+0x74>
 738:	81 e0       	ldi	r24, 0x01	; 1

			if(i==9) {
				ch = k;
				k = USART_Receive(1);
 73a:	93 dd       	rcall	.-1242   	; 0x262 <USART_Receive>
 73c:	81 e0       	ldi	r24, 0x01	; 1
 73e:	91 dd       	rcall	.-1246   	; 0x262 <USART_Receive>
				k = USART_Receive(1);	
 740:	05 c0       	rjmp	.+10     	; 0x74c <make_template+0x7e>
 742:	81 e0       	ldi	r24, 0x01	; 1
 744:	8e dd       	rcall	.-1252   	; 0x262 <USART_Receive>
 746:	21 97       	sbiw	r28, 0x01	; 1
		USART_Send(5, 1);
		USART_Send(0, 1);
		USART_Send(9, 1);

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 748:	e1 f7       	brne	.-8      	; 0x742 <make_template+0x74>
 74a:	f6 cf       	rjmp	.-20     	; 0x738 <make_template+0x6a>
 74c:	df 91       	pop	r29
 74e:	cf 91       	pop	r28

			if(i==9) {
 750:	08 95       	ret

00000752 <store>:
 752:	1f 93       	push	r17
					//PORTA |= (1<<4);
				}
			}
		}
	}
}
 754:	cf 93       	push	r28
 756:	df 93       	push	r29
 758:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

void store(int ID) {
	if(USART_IsSendReady(1)) {
 75c:	95 ff       	sbrs	r25, 5
 75e:	48 c0       	rjmp	.+144    	; 0x7f0 <store+0x9e>
 760:	c8 2f       	mov	r28, r24
		int i=0,sum=14+ID;
		char k=1,ch=1;

		USART_Send(239, 1);
 762:	61 e0       	ldi	r22, 0x01	; 1
 764:	8f ee       	ldi	r24, 0xEF	; 239
 766:	6b dd       	rcall	.-1322   	; 0x23e <USART_Send>
		USART_Send(1, 1);
 768:	61 e0       	ldi	r22, 0x01	; 1
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	68 dd       	rcall	.-1328   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 76e:	61 e0       	ldi	r22, 0x01	; 1
 770:	8f ef       	ldi	r24, 0xFF	; 255
 772:	65 dd       	rcall	.-1334   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 774:	61 e0       	ldi	r22, 0x01	; 1
 776:	8f ef       	ldi	r24, 0xFF	; 255
 778:	62 dd       	rcall	.-1340   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 77a:	61 e0       	ldi	r22, 0x01	; 1
 77c:	8f ef       	ldi	r24, 0xFF	; 255
 77e:	5f dd       	rcall	.-1346   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 780:	61 e0       	ldi	r22, 0x01	; 1
 782:	8f ef       	ldi	r24, 0xFF	; 255
 784:	5c dd       	rcall	.-1352   	; 0x23e <USART_Send>
		USART_Send(1, 1);
 786:	61 e0       	ldi	r22, 0x01	; 1
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	59 dd       	rcall	.-1358   	; 0x23e <USART_Send>
		USART_Send(0, 1);
 78c:	61 e0       	ldi	r22, 0x01	; 1
 78e:	80 e0       	ldi	r24, 0x00	; 0
 790:	56 dd       	rcall	.-1364   	; 0x23e <USART_Send>
		USART_Send(6, 1);	
 792:	61 e0       	ldi	r22, 0x01	; 1
 794:	86 e0       	ldi	r24, 0x06	; 6
 796:	53 dd       	rcall	.-1370   	; 0x23e <USART_Send>
		USART_Send(6, 1);
 798:	61 e0       	ldi	r22, 0x01	; 1
 79a:	86 e0       	ldi	r24, 0x06	; 6
 79c:	50 dd       	rcall	.-1376   	; 0x23e <USART_Send>
		USART_Send(1, 1);
 79e:	61 e0       	ldi	r22, 0x01	; 1
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	4d dd       	rcall	.-1382   	; 0x23e <USART_Send>
		USART_Send(0, 1);
 7a4:	61 e0       	ldi	r22, 0x01	; 1
 7a6:	80 e0       	ldi	r24, 0x00	; 0
 7a8:	4a dd       	rcall	.-1388   	; 0x23e <USART_Send>
		USART_Send(ID, 1);
 7aa:	61 e0       	ldi	r22, 0x01	; 1
 7ac:	8c 2f       	mov	r24, r28
 7ae:	47 dd       	rcall	.-1394   	; 0x23e <USART_Send>
 7b0:	61 e0       	ldi	r22, 0x01	; 1
		USART_Send(0, 1);//C
 7b2:	80 e0       	ldi	r24, 0x00	; 0
 7b4:	44 dd       	rcall	.-1400   	; 0x23e <USART_Send>
		USART_Send(sum, 1);//C
 7b6:	61 e0       	ldi	r22, 0x01	; 1
 7b8:	8e e0       	ldi	r24, 0x0E	; 14
 7ba:	8c 0f       	add	r24, r28
 7bc:	40 dd       	rcall	.-1408   	; 0x23e <USART_Send>

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 7be:	81 e0       	ldi	r24, 0x01	; 1
 7c0:	50 dd       	rcall	.-1376   	; 0x262 <USART_Receive>
 7c2:	c9 e0       	ldi	r28, 0x09	; 9
 7c4:	d0 e0       	ldi	r29, 0x00	; 0
 7c6:	0e c0       	rjmp	.+28     	; 0x7e4 <store+0x92>
			if(i==9) {
				ch=k;
				k=USART_Receive(1);
 7c8:	81 e0       	ldi	r24, 0x01	; 1
 7ca:	4b dd       	rcall	.-1386   	; 0x262 <USART_Receive>
 7cc:	81 e0       	ldi	r24, 0x01	; 1
				k=USART_Receive(1);
 7ce:	49 dd       	rcall	.-1390   	; 0x262 <USART_Receive>
 7d0:	11 11       	cpse	r17, r1
 7d2:	0e c0       	rjmp	.+28     	; 0x7f0 <store+0x9e>
				if(ch==0x00) {
 7d4:	6d e5       	ldi	r22, 0x5D	; 93
 7d6:	71 e0       	ldi	r23, 0x01	; 1
					LCD_DisplayString(17, "finger is stored");
 7d8:	81 e1       	ldi	r24, 0x11	; 17
 7da:	94 dd       	rcall	.-1240   	; 0x304 <LCD_DisplayString>
 7dc:	80 ed       	ldi	r24, 0xD0	; 208
 7de:	97 e0       	ldi	r25, 0x07	; 7
 7e0:	52 dd       	rcall	.-1372   	; 0x286 <delay_ms>
					delay_ms(2000);
 7e2:	06 c0       	rjmp	.+12     	; 0x7f0 <store+0x9e>
 7e4:	81 e0       	ldi	r24, 0x01	; 1
 7e6:	3d dd       	rcall	.-1414   	; 0x262 <USART_Receive>
 7e8:	18 2f       	mov	r17, r24
 7ea:	21 97       	sbiw	r28, 0x01	; 1
		USART_Send(ID, 1);
		USART_Send(0, 1);//C
		USART_Send(sum, 1);//C

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 7ec:	d9 f7       	brne	.-10     	; 0x7e4 <store+0x92>
 7ee:	ec cf       	rjmp	.-40     	; 0x7c8 <store+0x76>
 7f0:	df 91       	pop	r29
 7f2:	cf 91       	pop	r28
 7f4:	1f 91       	pop	r17
			if(i==9) {
 7f6:	08 95       	ret

000007f8 <check_finger>:
 7f8:	1f 93       	push	r17
					delay_ms(2000);
				}
			}
		}
	}
}
 7fa:	cf 93       	push	r28
 7fc:	df 93       	push	r29
 7fe:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>

void check_finger() {
	if(USART_IsSendReady(1)) {
 802:	85 ff       	sbrs	r24, 5
 804:	76 c0       	rjmp	.+236    	; 0x8f2 <check_finger+0xfa>
		LCD_DisplayString(1, "Checking finger");
 806:	6e e6       	ldi	r22, 0x6E	; 110
 808:	71 e0       	ldi	r23, 0x01	; 1
 80a:	81 e0       	ldi	r24, 0x01	; 1
 80c:	7b dd       	rcall	.-1290   	; 0x304 <LCD_DisplayString>
		LCD_DisplayString(17, "                ");
 80e:	6e e7       	ldi	r22, 0x7E	; 126
 810:	71 e0       	ldi	r23, 0x01	; 1
 812:	81 e1       	ldi	r24, 0x11	; 17
 814:	77 dd       	rcall	.-1298   	; 0x304 <LCD_DisplayString>
		int i = 0;
		char k = 1, ch = 1, fID = 1;
		
		USART_Flush(1);
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	f5 dc       	rcall	.-1558   	; 0x204 <USART_Flush>

		USART_Send(239, 1);
 81a:	61 e0       	ldi	r22, 0x01	; 1
 81c:	8f ee       	ldi	r24, 0xEF	; 239
 81e:	0f dd       	rcall	.-1506   	; 0x23e <USART_Send>
		USART_Send(1, 1);
 820:	61 e0       	ldi	r22, 0x01	; 1
 822:	81 e0       	ldi	r24, 0x01	; 1
 824:	0c dd       	rcall	.-1512   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 826:	61 e0       	ldi	r22, 0x01	; 1
 828:	8f ef       	ldi	r24, 0xFF	; 255
 82a:	09 dd       	rcall	.-1518   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 82c:	61 e0       	ldi	r22, 0x01	; 1
 82e:	8f ef       	ldi	r24, 0xFF	; 255
 830:	06 dd       	rcall	.-1524   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 832:	61 e0       	ldi	r22, 0x01	; 1
 834:	8f ef       	ldi	r24, 0xFF	; 255
 836:	03 dd       	rcall	.-1530   	; 0x23e <USART_Send>
		USART_Send(255, 1);
 838:	61 e0       	ldi	r22, 0x01	; 1
 83a:	8f ef       	ldi	r24, 0xFF	; 255
 83c:	00 dd       	rcall	.-1536   	; 0x23e <USART_Send>
		USART_Send(1, 1);
 83e:	61 e0       	ldi	r22, 0x01	; 1
 840:	81 e0       	ldi	r24, 0x01	; 1
 842:	fd dc       	rcall	.-1542   	; 0x23e <USART_Send>
		USART_Send(0, 1);
 844:	61 e0       	ldi	r22, 0x01	; 1
 846:	80 e0       	ldi	r24, 0x00	; 0
 848:	fa dc       	rcall	.-1548   	; 0x23e <USART_Send>
		USART_Send(8, 1);
 84a:	61 e0       	ldi	r22, 0x01	; 1
 84c:	88 e0       	ldi	r24, 0x08	; 8
 84e:	f7 dc       	rcall	.-1554   	; 0x23e <USART_Send>
		USART_Send(4, 1);
 850:	61 e0       	ldi	r22, 0x01	; 1
 852:	84 e0       	ldi	r24, 0x04	; 4
 854:	f4 dc       	rcall	.-1560   	; 0x23e <USART_Send>
		USART_Send(1, 1);
 856:	61 e0       	ldi	r22, 0x01	; 1
 858:	81 e0       	ldi	r24, 0x01	; 1
 85a:	f1 dc       	rcall	.-1566   	; 0x23e <USART_Send>
		USART_Send(0, 1);
 85c:	61 e0       	ldi	r22, 0x01	; 1
 85e:	80 e0       	ldi	r24, 0x00	; 0
 860:	ee dc       	rcall	.-1572   	; 0x23e <USART_Send>
		USART_Send(0, 1);
 862:	61 e0       	ldi	r22, 0x01	; 1
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	eb dc       	rcall	.-1578   	; 0x23e <USART_Send>
		USART_Send(0, 1);
 868:	61 e0       	ldi	r22, 0x01	; 1
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	e8 dc       	rcall	.-1584   	; 0x23e <USART_Send>
		USART_Send(10, 1);
 86e:	61 e0       	ldi	r22, 0x01	; 1
 870:	8a e0       	ldi	r24, 0x0A	; 10
 872:	e5 dc       	rcall	.-1590   	; 0x23e <USART_Send>
		USART_Send(0, 1);
 874:	61 e0       	ldi	r22, 0x01	; 1
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	e2 dc       	rcall	.-1596   	; 0x23e <USART_Send>
		USART_Send(24, 1);
 87a:	61 e0       	ldi	r22, 0x01	; 1
 87c:	88 e1       	ldi	r24, 0x18	; 24
 87e:	df dc       	rcall	.-1602   	; 0x23e <USART_Send>

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 880:	81 e0       	ldi	r24, 0x01	; 1
 882:	ef dc       	rcall	.-1570   	; 0x262 <USART_Receive>
 884:	c9 e0       	ldi	r28, 0x09	; 9
 886:	d0 e0       	ldi	r29, 0x00	; 0
 888:	2b c0       	rjmp	.+86     	; 0x8e0 <check_finger+0xe8>

			if(i == 9) {
				ch = k;
				k = USART_Receive(1);
 88a:	81 e0       	ldi	r24, 0x01	; 1
 88c:	ea dc       	rcall	.-1580   	; 0x262 <USART_Receive>
 88e:	c8 2f       	mov	r28, r24
				fID = k;		// ID
				k = USART_Receive(1);
 890:	81 e0       	ldi	r24, 0x01	; 1
 892:	e7 dc       	rcall	.-1586   	; 0x262 <USART_Receive>
				k = USART_Receive(1);
 894:	81 e0       	ldi	r24, 0x01	; 1
 896:	e5 dc       	rcall	.-1590   	; 0x262 <USART_Receive>
 898:	81 e0       	ldi	r24, 0x01	; 1
				k = USART_Receive(1);
 89a:	e3 dc       	rcall	.-1594   	; 0x262 <USART_Receive>
 89c:	81 e0       	ldi	r24, 0x01	; 1
 89e:	e1 dc       	rcall	.-1598   	; 0x262 <USART_Receive>
				k = USART_Receive(1);
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	df dc       	rcall	.-1602   	; 0x262 <USART_Receive>
				k = USART_Receive(1);
 8a4:	8c 2f       	mov	r24, r28
 8a6:	90 e0       	ldi	r25, 0x00	; 0
	
				char resultID[] = {fgetc(fID)};
 8a8:	8e d1       	rcall	.+796    	; 0xbc6 <fgetc>
 8aa:	11 11       	cpse	r17, r1
 8ac:	0d c0       	rjmp	.+26     	; 0x8c8 <check_finger+0xd0>
				if(ch == 0x00) {
 8ae:	6e e7       	ldi	r22, 0x7E	; 126
					LCD_DisplayString(1, "                ");
 8b0:	71 e0       	ldi	r23, 0x01	; 1
 8b2:	81 e0       	ldi	r24, 0x01	; 1
 8b4:	27 dd       	rcall	.-1458   	; 0x304 <LCD_DisplayString>
 8b6:	6f e8       	ldi	r22, 0x8F	; 143
 8b8:	71 e0       	ldi	r23, 0x01	; 1
					LCD_DisplayString(17, "Finger FOUND!!    ");
 8ba:	81 e1       	ldi	r24, 0x11	; 17
 8bc:	23 dd       	rcall	.-1466   	; 0x304 <LCD_DisplayString>
 8be:	10 92 2e 02 	sts	0x022E, r1	; 0x80022e <lock+0x1>
					lock = 0;
 8c2:	10 92 2d 02 	sts	0x022D, r1	; 0x80022d <lock>
 8c6:	12 c0       	rjmp	.+36     	; 0x8ec <check_finger+0xf4>
 8c8:	6e e7       	ldi	r22, 0x7E	; 126
 8ca:	71 e0       	ldi	r23, 0x01	; 1
					//delay_ms(500);
					//PORTB |= (1 << PB2);
				} 
				else {
					LCD_DisplayString(1, "                ");
 8cc:	81 e0       	ldi	r24, 0x01	; 1
 8ce:	1a dd       	rcall	.-1484   	; 0x304 <LCD_DisplayString>
 8d0:	62 ea       	ldi	r22, 0xA2	; 162
 8d2:	71 e0       	ldi	r23, 0x01	; 1
 8d4:	81 e1       	ldi	r24, 0x11	; 17
					LCD_DisplayString(17, "Finger NOT Found   ");
 8d6:	16 dd       	rcall	.-1492   	; 0x304 <LCD_DisplayString>
 8d8:	88 e8       	ldi	r24, 0x88	; 136
 8da:	93 e1       	ldi	r25, 0x13	; 19
 8dc:	d4 dc       	rcall	.-1624   	; 0x286 <delay_ms>
 8de:	06 c0       	rjmp	.+12     	; 0x8ec <check_finger+0xf4>
					delay_ms(5000);
 8e0:	81 e0       	ldi	r24, 0x01	; 1
 8e2:	bf dc       	rcall	.-1666   	; 0x262 <USART_Receive>
 8e4:	18 2f       	mov	r17, r24
 8e6:	21 97       	sbiw	r28, 0x01	; 1
 8e8:	d9 f7       	brne	.-10     	; 0x8e0 <check_finger+0xe8>
		USART_Send(10, 1);
		USART_Send(0, 1);
		USART_Send(24, 1);

		for(i = 0; i < 10; i++) {
			k = USART_Receive(1);
 8ea:	cf cf       	rjmp	.-98     	; 0x88a <check_finger+0x92>
 8ec:	88 ee       	ldi	r24, 0xE8	; 232
 8ee:	93 e0       	ldi	r25, 0x03	; 3
 8f0:	ca dc       	rcall	.-1644   	; 0x286 <delay_ms>
 8f2:	df 91       	pop	r29

			if(i == 9) {
 8f4:	cf 91       	pop	r28
 8f6:	1f 91       	pop	r17
					LCD_DisplayString(17, "Finger NOT Found   ");
					delay_ms(5000);
				}
			}
		}
		delay_ms(1000);
 8f8:	08 95       	ret

000008fa <unlock>:
 8fa:	e0 91 45 02 	lds	r30, 0x0245	; 0x800245 <state1>
 8fe:	8e 2f       	mov	r24, r30
	}
}
 900:	90 e0       	ldi	r25, 0x00	; 0
 902:	8b 30       	cpi	r24, 0x0B	; 11
 904:	91 05       	cpc	r25, r1
 906:	08 f0       	brcs	.+2      	; 0x90a <unlock+0x10>


enum States1 {init1, wait, scanRFID, nextState, readFinger1, readFinger2, makeTemplate, checkFinger, open, addRFID, addFingerprint} state1;

void unlock() {
	switch(state1) {
 908:	ad c0       	rjmp	.+346    	; 0xa64 <unlock+0x16a>
 90a:	fc 01       	movw	r30, r24
 90c:	ea 5b       	subi	r30, 0xBA	; 186
 90e:	ff 4f       	sbci	r31, 0xFF	; 255
 910:	48 c1       	rjmp	.+656    	; 0xba2 <__tablejump2__>
		case init1:
			state1 = wait;
 912:	81 e0       	ldi	r24, 0x01	; 1
 914:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
			break;
 918:	e2 c0       	rjmp	.+452    	; 0xade <unlock+0x1e4>
		case wait:
			//if(GetBit(PINA, 1) == 0) {
			if(receivedData == 1) {
 91a:	80 91 15 02 	lds	r24, 0x0215	; 0x800215 <receivedData>
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	09 f0       	breq	.+2      	; 0x924 <unlock+0x2a>
 922:	dd c0       	rjmp	.+442    	; 0xade <unlock+0x1e4>
				state1 = scanRFID;
 924:	82 e0       	ldi	r24, 0x02	; 2
 926:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
 92a:	b0 c0       	rjmp	.+352    	; 0xa8c <unlock+0x192>
			else {
				state1 = wait;
			}
			break;
		case scanRFID:
			if(strcmp(outID, card0) == 0 || strcmp(outID, card1) == 0 || strcmp(outID, eepromRFID) == 0) {
 92c:	6b e0       	ldi	r22, 0x0B	; 11
 92e:	71 e0       	ldi	r23, 0x01	; 1
 930:	8f e2       	ldi	r24, 0x2F	; 47
 932:	92 e0       	ldi	r25, 0x02	; 2
 934:	3f d1       	rcall	.+638    	; 0xbb4 <strcmp>
 936:	89 2b       	or	r24, r25
 938:	79 f0       	breq	.+30     	; 0x958 <unlock+0x5e>
 93a:	60 e0       	ldi	r22, 0x00	; 0
 93c:	71 e0       	ldi	r23, 0x01	; 1
 93e:	8f e2       	ldi	r24, 0x2F	; 47
 940:	92 e0       	ldi	r25, 0x02	; 2
 942:	38 d1       	rcall	.+624    	; 0xbb4 <strcmp>
 944:	89 2b       	or	r24, r25
 946:	41 f0       	breq	.+16     	; 0x958 <unlock+0x5e>
 948:	66 e5       	ldi	r22, 0x56	; 86
 94a:	72 e0       	ldi	r23, 0x02	; 2
 94c:	8f e2       	ldi	r24, 0x2F	; 47
 94e:	92 e0       	ldi	r25, 0x02	; 2
 950:	31 d1       	rcall	.+610    	; 0xbb4 <strcmp>
 952:	89 2b       	or	r24, r25
 954:	09 f0       	breq	.+2      	; 0x958 <unlock+0x5e>
 956:	9a c0       	rjmp	.+308    	; 0xa8c <unlock+0x192>
				state1 = nextState;
 958:	83 e0       	ldi	r24, 0x03	; 3
 95a:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
			scan_RFID();
			eeprom_read_block(eepromRFID,1,strlen(saveOutID));
			//delay_ms(1000);
			break;
		case nextState:
			sendData = 3;	// Fingerprint
 95e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			LCD_ClearScreen();
			LCD_DisplayString(1, "Place Finger");
 962:	ad dc       	rcall	.-1702   	; 0x2be <LCD_ClearScreen>
 964:	66 eb       	ldi	r22, 0xB6	; 182
 966:	71 e0       	ldi	r23, 0x01	; 1
 968:	81 e0       	ldi	r24, 0x01	; 1
			PORTB |= (1 << PB1);
 96a:	cc dc       	rcall	.-1640   	; 0x304 <LCD_DisplayString>
			delay_ms(5000);
 96c:	29 9a       	sbi	0x05, 1	; 5
 96e:	88 e8       	ldi	r24, 0x88	; 136
 970:	93 e1       	ldi	r25, 0x13	; 19
 972:	89 cc       	rjmp	.-1774   	; 0x286 <delay_ms>
			else {
				state1 = scanRFID;
			}
			break;
		case nextState:
			state1 = readFinger1;
 974:	08 95       	ret
 976:	84 e0       	ldi	r24, 0x04	; 4
			LCD_DisplayString(1, "Place Finger");
			PORTB |= (1 << PB1);
			delay_ms(5000);
			break;
		case readFinger1:
			sendData = 3;	// Fingerprint
 978:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
 97c:	83 e0       	ldi	r24, 0x03	; 3
			read_finger_1();
 97e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			delay_ms(1000);
 982:	73 dd       	rcall	.-1306   	; 0x46a <read_finger_1>
 984:	88 ee       	ldi	r24, 0xE8	; 232
 986:	93 e0       	ldi	r25, 0x03	; 3
			break;
 988:	7e cc       	rjmp	.-1796   	; 0x286 <delay_ms>
			break;
		case nextState:
			state1 = readFinger1;
			break;
		case readFinger1:
			state1 = readFinger2;
 98a:	08 95       	ret
 98c:	85 e0       	ldi	r24, 0x05	; 5
			sendData = 3;	// Fingerprint
			read_finger_1();
			delay_ms(1000);
			break;
		case readFinger2:
			sendData = 3;	// Fingerprint
 98e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
 992:	83 e0       	ldi	r24, 0x03	; 3
			read_finger_2();
 994:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			delay_ms(1000);
 998:	01 de       	rcall	.-1022   	; 0x59c <read_finger_2>
 99a:	88 ee       	ldi	r24, 0xE8	; 232
 99c:	93 e0       	ldi	r25, 0x03	; 3
			break;
 99e:	73 cc       	rjmp	.-1818   	; 0x286 <delay_ms>
			break;
		case readFinger1:
			state1 = readFinger2;
			break;
		case readFinger2:
			state1 = makeTemplate;
 9a0:	08 95       	ret
 9a2:	86 e0       	ldi	r24, 0x06	; 6
 9a4:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
			sendData = 3;	// Fingerprint
			read_finger_2();
			delay_ms(1000);
			break;
		case makeTemplate:
			sendData = 3;	// Fingerprint
 9a8:	83 e0       	ldi	r24, 0x03	; 3
 9aa:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			make_template();
			delay_ms(500);
 9ae:	8f de       	rcall	.-738    	; 0x6ce <make_template>
 9b0:	84 ef       	ldi	r24, 0xF4	; 244
 9b2:	91 e0       	ldi	r25, 0x01	; 1
 9b4:	68 cc       	rjmp	.-1840   	; 0x286 <delay_ms>
			break;
 9b6:	08 95       	ret
			break;
		case readFinger2:
			state1 = makeTemplate;
			break;
		case makeTemplate:
			state1 = checkFinger;
 9b8:	87 e0       	ldi	r24, 0x07	; 7
 9ba:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
			sendData = 3;	// Fingerprint
			make_template();
			delay_ms(500);
			break;
		case checkFinger:
			sendData = 3;	// Fingerprint
 9be:	83 e0       	ldi	r24, 0x03	; 3
 9c0:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			check_finger();
 9c4:	19 cf       	rjmp	.-462    	; 0x7f8 <check_finger>
 9c6:	08 95       	ret
			break;
 9c8:	80 91 2d 02 	lds	r24, 0x022D	; 0x80022d <lock>
			break;
		case makeTemplate:
			state1 = checkFinger;
			break;
		case checkFinger:
			if(lock == 0) {
 9cc:	90 91 2e 02 	lds	r25, 0x022E	; 0x80022e <lock+0x1>
 9d0:	89 2b       	or	r24, r25
 9d2:	21 f4       	brne	.+8      	; 0x9dc <unlock+0xe2>
 9d4:	88 e0       	ldi	r24, 0x08	; 8
				state1 = open;
 9d6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
 9da:	6f c0       	rjmp	.+222    	; 0xaba <unlock+0x1c0>
 9dc:	81 e0       	ldi	r24, 0x01	; 1
			}
			else {
				state1 = wait;
 9de:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
 9e2:	7d c0       	rjmp	.+250    	; 0xade <unlock+0x1e4>
 9e4:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <openTimer>
			}
			break;
		case open:
			if(openTimer > 0 && (GetBit(PINA, 2) == 0)) {
 9e8:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <openTimer+0x1>
 9ec:	18 16       	cp	r1, r24
 9ee:	19 06       	cpc	r1, r25
 9f0:	84 f4       	brge	.+32     	; 0xa12 <unlock+0x118>
 9f2:	02 99       	sbic	0x00, 2	; 0
				state1 = addRFID;
 9f4:	62 c0       	rjmp	.+196    	; 0xaba <unlock+0x1c0>
 9f6:	89 e0       	ldi	r24, 0x09	; 9
 9f8:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
			LCD_DisplayString(1, "UNLOCKED        ");
			openTimer--;
			PORTB |= (1 << PB2);
			break;
		case addRFID:
			sendData = 5;	// add user
 9fc:	85 e0       	ldi	r24, 0x05	; 5
 9fe:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			LCD_DisplayString(17, "Scan Card Twice");
 a02:	63 ec       	ldi	r22, 0xC3	; 195
 a04:	71 e0       	ldi	r23, 0x01	; 1
 a06:	81 e1       	ldi	r24, 0x11	; 17
 a08:	7d dc       	rcall	.-1798   	; 0x304 <LCD_DisplayString>
			save_RFID(1);
 a0a:	81 e0       	ldi	r24, 0x01	; 1
 a0c:	90 e0       	ldi	r25, 0x00	; 0
 a0e:	dd cc       	rjmp	.-1606   	; 0x3ca <save_RFID>
			break;
 a10:	08 95       	ret
			}
			else if(openTimer > 0) {
				state1 = open;
			}
			else {
				state1 = wait;
 a12:	81 e0       	ldi	r24, 0x01	; 1
 a14:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
			sendData = 5;	// add user
			LCD_DisplayString(17, "Scan Card Twice");
			save_RFID(1);
			break;
		case addFingerprint:
			sendData = 5;	// add user
 a18:	62 c0       	rjmp	.+196    	; 0xade <unlock+0x1e4>
 a1a:	8a e0       	ldi	r24, 0x0A	; 10
			LCD_DisplayString(17, "Place Finger   ");
 a1c:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
 a20:	85 e0       	ldi	r24, 0x05	; 5
 a22:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			delay_ms(2000);
 a26:	63 ed       	ldi	r22, 0xD3	; 211
 a28:	71 e0       	ldi	r23, 0x01	; 1
			read_finger_1();
 a2a:	81 e1       	ldi	r24, 0x11	; 17
			delay_ms(1000);
 a2c:	6b dc       	rcall	.-1834   	; 0x304 <LCD_DisplayString>
 a2e:	80 ed       	ldi	r24, 0xD0	; 208
 a30:	97 e0       	ldi	r25, 0x07	; 7
 a32:	29 dc       	rcall	.-1966   	; 0x286 <delay_ms>
			read_finger_2();
 a34:	1a dd       	rcall	.-1484   	; 0x46a <read_finger_1>
 a36:	88 ee       	ldi	r24, 0xE8	; 232
			delay_ms(1000);
 a38:	93 e0       	ldi	r25, 0x03	; 3
 a3a:	25 dc       	rcall	.-1974   	; 0x286 <delay_ms>
 a3c:	af dd       	rcall	.-1186   	; 0x59c <read_finger_2>
 a3e:	88 ee       	ldi	r24, 0xE8	; 232
			make_template();
 a40:	93 e0       	ldi	r25, 0x03	; 3
 a42:	21 dc       	rcall	.-1982   	; 0x286 <delay_ms>
			delay_ms(500);
 a44:	44 de       	rcall	.-888    	; 0x6ce <make_template>
 a46:	84 ef       	ldi	r24, 0xF4	; 244
 a48:	91 e0       	ldi	r25, 0x01	; 1
 a4a:	1d dc       	rcall	.-1990   	; 0x286 <delay_ms>
			LCD_DisplayString(17, "Storing Finger");
 a4c:	63 ee       	ldi	r22, 0xE3	; 227
 a4e:	71 e0       	ldi	r23, 0x01	; 1
 a50:	81 e1       	ldi	r24, 0x11	; 17
 a52:	58 dc       	rcall	.-1872   	; 0x304 <LCD_DisplayString>
 a54:	87 e0       	ldi	r24, 0x07	; 7
			store(7);
 a56:	90 e0       	ldi	r25, 0x00	; 0
 a58:	7c ce       	rjmp	.-776    	; 0x752 <store>
 a5a:	08 95       	ret
 a5c:	81 e0       	ldi	r24, 0x01	; 1
			break;
 a5e:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <state1>
			break;
		case addRFID:
			state1 = addFingerprint;
			break;
		case addFingerprint:
			state1 = wait;
 a62:	3d c0       	rjmp	.+122    	; 0xade <unlock+0x1e4>
 a64:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <state1>
			break;
		default:
			state1 = init1;
 a68:	29 98       	cbi	0x05, 1	; 5
			break;
	}
	
	switch(state1) {
		case init1:
			PORTB &= ~(1 << PB1);
 a6a:	2a 98       	cbi	0x05, 2	; 5
			PORTB &= ~(1 << PB2);
 a6c:	81 e0       	ldi	r24, 0x01	; 1
			lock = 1;
 a6e:	90 e0       	ldi	r25, 0x00	; 0
 a70:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <lock+0x1>
 a74:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <lock>
 a78:	8a ef       	ldi	r24, 0xFA	; 250
			openTimer = 250;
 a7a:	90 e0       	ldi	r25, 0x00	; 0
 a7c:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <openTimer+0x1>
 a80:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <openTimer>
			sendData = 1;	// locked
 a84:	81 e0       	ldi	r24, 0x01	; 1
 a86:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			store(7);
			break;
		default:
			break;
	}
}
 a8a:	08 95       	ret
			LCD_ClearScreen();
			LCD_DisplayString(1, "Locked: Waiting");
			//delay_ms(100);
			break;
		case scanRFID:
			sendData = 2;	// RFID
 a8c:	82 e0       	ldi	r24, 0x02	; 2
 a8e:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
			LCD_DisplayString(1, "Scan Card Twice");
 a92:	63 ec       	ldi	r22, 0xC3	; 195
 a94:	71 e0       	ldi	r23, 0x01	; 1
 a96:	81 e0       	ldi	r24, 0x01	; 1
 a98:	35 dc       	rcall	.-1942   	; 0x304 <LCD_DisplayString>
			scan_RFID();
 a9a:	53 dc       	rcall	.-1882   	; 0x342 <scan_RFID>
 a9c:	ea e3       	ldi	r30, 0x3A	; 58
			eeprom_read_block(eepromRFID,1,strlen(saveOutID));
 a9e:	f2 e0       	ldi	r31, 0x02	; 2
 aa0:	01 90       	ld	r0, Z+
 aa2:	00 20       	and	r0, r0
 aa4:	e9 f7       	brne	.-6      	; 0xaa0 <unlock+0x1a6>
 aa6:	31 97       	sbiw	r30, 0x01	; 1
 aa8:	af 01       	movw	r20, r30
 aaa:	4a 53       	subi	r20, 0x3A	; 58
 aac:	52 40       	sbci	r21, 0x02	; 2
 aae:	61 e0       	ldi	r22, 0x01	; 1
 ab0:	70 e0       	ldi	r23, 0x00	; 0
 ab2:	86 e5       	ldi	r24, 0x56	; 86
 ab4:	92 e0       	ldi	r25, 0x02	; 2
 ab6:	c5 c0       	rjmp	.+394    	; 0xc42 <eeprom_read_block>
 ab8:	08 95       	ret
 aba:	84 e0       	ldi	r24, 0x04	; 4
			//delay_ms(1000);
			break;
 abc:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
		case checkFinger:
			sendData = 3;	// Fingerprint
			check_finger();
			break;
		case open:
			sendData = 4;	// Unlocked
 ac0:	62 ef       	ldi	r22, 0xF2	; 242
 ac2:	71 e0       	ldi	r23, 0x01	; 1
			LCD_DisplayString(1, "UNLOCKED        ");
 ac4:	81 e0       	ldi	r24, 0x01	; 1
 ac6:	1e dc       	rcall	.-1988   	; 0x304 <LCD_DisplayString>
 ac8:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <openTimer>
			openTimer--;
 acc:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <openTimer+0x1>
 ad0:	01 97       	sbiw	r24, 0x01	; 1
 ad2:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <openTimer+0x1>
 ad6:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <openTimer>
 ada:	2a 9a       	sbi	0x05, 2	; 5
			PORTB |= (1 << PB2);
 adc:	08 95       	ret
			break;
 ade:	29 98       	cbi	0x05, 1	; 5
			lock = 1;
			openTimer = 250;
			sendData = 1;	// locked
			break;
		case wait:
			PORTB &= ~(1 << PB1);
 ae0:	2a 98       	cbi	0x05, 2	; 5
			PORTB &= ~(1 << PB2);
 ae2:	81 e0       	ldi	r24, 0x01	; 1
			sendData = 1;	// locked
 ae4:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <__data_end>
 ae8:	81 e0       	ldi	r24, 0x01	; 1
			lock = 1;
 aea:	90 e0       	ldi	r25, 0x00	; 0
 aec:	90 93 2e 02 	sts	0x022E, r25	; 0x80022e <lock+0x1>
 af0:	80 93 2d 02 	sts	0x022D, r24	; 0x80022d <lock>
 af4:	8a ef       	ldi	r24, 0xFA	; 250
			openTimer = 250;
 af6:	90 e0       	ldi	r25, 0x00	; 0
 af8:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <openTimer+0x1>
 afc:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <openTimer>
 b00:	de db       	rcall	.-2116   	; 0x2be <LCD_ClearScreen>
			LCD_ClearScreen();
 b02:	63 e0       	ldi	r22, 0x03	; 3
 b04:	72 e0       	ldi	r23, 0x02	; 2
			LCD_DisplayString(1, "Locked: Waiting");
 b06:	81 e0       	ldi	r24, 0x01	; 1
 b08:	fd cb       	rjmp	.-2054   	; 0x304 <LCD_DisplayString>
 b0a:	08 95       	ret

00000b0c <alarm>:
 b0c:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <state2>
 b10:	81 30       	cpi	r24, 0x01	; 1
}

enum States2 {init2, alarmOff, alarmOn} state2;

void alarm() {
	switch(state2) {
 b12:	41 f0       	breq	.+16     	; 0xb24 <alarm+0x18>
 b14:	18 f0       	brcs	.+6      	; 0xb1c <alarm+0x10>
 b16:	82 30       	cpi	r24, 0x02	; 2
 b18:	59 f0       	breq	.+22     	; 0xb30 <alarm+0x24>
 b1a:	10 c0       	rjmp	.+32     	; 0xb3c <alarm+0x30>
		case init2:
			state2 = alarmOff;
 b1c:	81 e0       	ldi	r24, 0x01	; 1
 b1e:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <state2>
			break;
 b22:	12 c0       	rjmp	.+36     	; 0xb48 <alarm+0x3c>
		case alarmOff:
			if(GetBit(PINA, 0) == 1) {
 b24:	00 9b       	sbis	0x00, 0	; 0
 b26:	10 c0       	rjmp	.+32     	; 0xb48 <alarm+0x3c>
			state2 = alarmOn;
 b28:	82 e0       	ldi	r24, 0x02	; 2
 b2a:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <state2>
 b2e:	0a c0       	rjmp	.+20     	; 0xb44 <alarm+0x38>
			else {
				state2 = alarmOff;
			}
			break;
		case alarmOn:
			if(GetBit(PINA, 0) == 1) {
 b30:	00 99       	sbic	0x00, 0	; 0
 b32:	08 c0       	rjmp	.+16     	; 0xb44 <alarm+0x38>
				state2 = alarmOn;
			}
			else {
				state2 = alarmOff;
 b34:	81 e0       	ldi	r24, 0x01	; 1
 b36:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <state2>
 b3a:	06 c0       	rjmp	.+12     	; 0xb48 <alarm+0x3c>
			}
			break;
		default:
			state2 = init2;
 b3c:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <state2>
			break;
	}
	
	switch(state2) {
		case init2:
			PORTB &= ~(1 << PB0);
 b40:	28 98       	cbi	0x05, 0	; 5
			break;
		default:
			PORTB &= ~(1 << PB0);
			break;
	}
}
 b42:	08 95       	ret
			break;
		case alarmOff:
			PORTB &= ~(1 << PB0);
			break;
		case alarmOn:
			PORTB |= (1 << PB0);
 b44:	28 9a       	sbi	0x05, 0	; 5
			break;
 b46:	08 95       	ret
	switch(state2) {
		case init2:
			PORTB &= ~(1 << PB0);
			break;
		case alarmOff:
			PORTB &= ~(1 << PB0);
 b48:	28 98       	cbi	0x05, 0	; 5
 b4a:	08 95       	ret

00000b4c <main>:
			break;
	}
}

int main(void) {
	DDRA = 0x00;	PORTA = 0xFE;
 b4c:	11 b8       	out	0x01, r1	; 1
 b4e:	8e ef       	ldi	r24, 0xFE	; 254
 b50:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF;	PORTB = 0x00;
 b52:	9f ef       	ldi	r25, 0xFF	; 255
 b54:	94 b9       	out	0x04, r25	; 4
 b56:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 b58:	97 b9       	out	0x07, r25	; 7
 b5a:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFE;	PORTD = 0x01;
 b5c:	8a b9       	out	0x0a, r24	; 10
 b5e:	81 e0       	ldi	r24, 0x01	; 1
 b60:	8b b9       	out	0x0b, r24	; 11
	
	TimerSet(50);
 b62:	62 e3       	ldi	r22, 0x32	; 50
 b64:	70 e0       	ldi	r23, 0x00	; 0
 b66:	80 e0       	ldi	r24, 0x00	; 0
 b68:	90 e0       	ldi	r25, 0x00	; 0
 b6a:	b9 da       	rcall	.-2702   	; 0xde <TimerSet>
	TimerOn();
 b6c:	c9 da       	rcall	.-2670   	; 0x100 <TimerOn>
 b6e:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <state1>
	
	state1 = init1;
 b72:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <state2>
	state2 = init2;
	
	LCD_init();
 b76:	a6 db       	rcall	.-2228   	; 0x2c4 <LCD_init>
	LCD_ClearScreen();
 b78:	a2 db       	rcall	.-2236   	; 0x2be <LCD_ClearScreen>
	initUSART(0);
 b7a:	80 e0       	ldi	r24, 0x00	; 0
	initUSART(1);
 b7c:	21 db       	rcall	.-2494   	; 0x1c0 <initUSART>
 b7e:	81 e0       	ldi	r24, 0x01	; 1
	
	SPI_ServantInit();
 b80:	1f db       	rcall	.-2498   	; 0x1c0 <initUSART>
 b82:	d5 db       	rcall	.-2134   	; 0x32e <SPI_ServantInit>
	
	/* Replace with your application code */

	while (1) {
		
		unlock();
 b84:	ba de       	rcall	.-652    	; 0x8fa <unlock>
 b86:	c2 df       	rcall	.-124    	; 0xb0c <alarm>
		alarm();
 b88:	d7 db       	rcall	.-2130   	; 0x338 <SPI_SlaveReceive>
 b8a:	80 93 15 02 	sts	0x0215, r24	; 0x800215 <receivedData>
		receivedData = SPI_SlaveReceive();
 b8e:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <__data_end>
 b92:	8e bd       	out	0x2e, r24	; 46
		SPI_SlaveTransmit(sendData);
 b94:	80 91 1a 02 	lds	r24, 0x021A	; 0x80021a <TimerFlag>
	;
	return SPDR;
}

void SPI_SlaveTransmit(unsigned char send) {
	SPDR = send;
 b98:	88 23       	and	r24, r24
		
		unlock();
		alarm();
		receivedData = SPI_SlaveReceive();
		SPI_SlaveTransmit(sendData);
		while (!TimerFlag){}
 b9a:	e1 f3       	breq	.-8      	; 0xb94 <main+0x48>
 b9c:	10 92 1a 02 	sts	0x021A, r1	; 0x80021a <TimerFlag>
 ba0:	f1 cf       	rjmp	.-30     	; 0xb84 <main+0x38>

00000ba2 <__tablejump2__>:
		TimerFlag = 0;
 ba2:	ee 0f       	add	r30, r30
 ba4:	ff 1f       	adc	r31, r31
	}
 ba6:	00 24       	eor	r0, r0
 ba8:	00 1c       	adc	r0, r0
 baa:	0b be       	out	0x3b, r0	; 59
 bac:	07 90       	elpm	r0, Z+
 bae:	f6 91       	elpm	r31, Z
 bb0:	e0 2d       	mov	r30, r0
 bb2:	09 94       	ijmp

00000bb4 <strcmp>:
 bb4:	fb 01       	movw	r30, r22
 bb6:	dc 01       	movw	r26, r24
 bb8:	8d 91       	ld	r24, X+
 bba:	01 90       	ld	r0, Z+
 bbc:	80 19       	sub	r24, r0
 bbe:	01 10       	cpse	r0, r1
 bc0:	d9 f3       	breq	.-10     	; 0xbb8 <strcmp+0x4>
 bc2:	99 0b       	sbc	r25, r25
 bc4:	08 95       	ret

00000bc6 <fgetc>:
 bc6:	cf 93       	push	r28
 bc8:	df 93       	push	r29
 bca:	ec 01       	movw	r28, r24
 bcc:	2b 81       	ldd	r18, Y+3	; 0x03
 bce:	20 ff       	sbrs	r18, 0
 bd0:	33 c0       	rjmp	.+102    	; 0xc38 <fgetc+0x72>
 bd2:	26 ff       	sbrs	r18, 6
 bd4:	0a c0       	rjmp	.+20     	; 0xbea <fgetc+0x24>
 bd6:	2f 7b       	andi	r18, 0xBF	; 191
 bd8:	2b 83       	std	Y+3, r18	; 0x03
 bda:	8e 81       	ldd	r24, Y+6	; 0x06
 bdc:	9f 81       	ldd	r25, Y+7	; 0x07
 bde:	01 96       	adiw	r24, 0x01	; 1
 be0:	9f 83       	std	Y+7, r25	; 0x07
 be2:	8e 83       	std	Y+6, r24	; 0x06
 be4:	8a 81       	ldd	r24, Y+2	; 0x02
 be6:	90 e0       	ldi	r25, 0x00	; 0
 be8:	29 c0       	rjmp	.+82     	; 0xc3c <fgetc+0x76>
 bea:	22 ff       	sbrs	r18, 2
 bec:	0f c0       	rjmp	.+30     	; 0xc0c <fgetc+0x46>
 bee:	e8 81       	ld	r30, Y
 bf0:	f9 81       	ldd	r31, Y+1	; 0x01
 bf2:	80 81       	ld	r24, Z
 bf4:	08 2e       	mov	r0, r24
 bf6:	00 0c       	add	r0, r0
 bf8:	99 0b       	sbc	r25, r25
 bfa:	00 97       	sbiw	r24, 0x00	; 0
 bfc:	19 f4       	brne	.+6      	; 0xc04 <fgetc+0x3e>
 bfe:	20 62       	ori	r18, 0x20	; 32
 c00:	2b 83       	std	Y+3, r18	; 0x03
 c02:	1a c0       	rjmp	.+52     	; 0xc38 <fgetc+0x72>
 c04:	31 96       	adiw	r30, 0x01	; 1
 c06:	f9 83       	std	Y+1, r31	; 0x01
 c08:	e8 83       	st	Y, r30
 c0a:	0e c0       	rjmp	.+28     	; 0xc28 <fgetc+0x62>
 c0c:	ea 85       	ldd	r30, Y+10	; 0x0a
 c0e:	fb 85       	ldd	r31, Y+11	; 0x0b
 c10:	09 95       	icall
 c12:	97 ff       	sbrs	r25, 7
 c14:	09 c0       	rjmp	.+18     	; 0xc28 <fgetc+0x62>
 c16:	2b 81       	ldd	r18, Y+3	; 0x03
 c18:	01 96       	adiw	r24, 0x01	; 1
 c1a:	11 f0       	breq	.+4      	; 0xc20 <fgetc+0x5a>
 c1c:	80 e2       	ldi	r24, 0x20	; 32
 c1e:	01 c0       	rjmp	.+2      	; 0xc22 <fgetc+0x5c>
 c20:	80 e1       	ldi	r24, 0x10	; 16
 c22:	82 2b       	or	r24, r18
 c24:	8b 83       	std	Y+3, r24	; 0x03
 c26:	08 c0       	rjmp	.+16     	; 0xc38 <fgetc+0x72>
 c28:	2e 81       	ldd	r18, Y+6	; 0x06
 c2a:	3f 81       	ldd	r19, Y+7	; 0x07
 c2c:	2f 5f       	subi	r18, 0xFF	; 255
 c2e:	3f 4f       	sbci	r19, 0xFF	; 255
 c30:	3f 83       	std	Y+7, r19	; 0x07
 c32:	2e 83       	std	Y+6, r18	; 0x06
 c34:	99 27       	eor	r25, r25
 c36:	02 c0       	rjmp	.+4      	; 0xc3c <fgetc+0x76>
 c38:	8f ef       	ldi	r24, 0xFF	; 255
 c3a:	9f ef       	ldi	r25, 0xFF	; 255
 c3c:	df 91       	pop	r29
 c3e:	cf 91       	pop	r28
 c40:	08 95       	ret

00000c42 <eeprom_read_block>:
 c42:	dc 01       	movw	r26, r24
 c44:	cb 01       	movw	r24, r22

00000c46 <eeprom_read_blraw>:
 c46:	fc 01       	movw	r30, r24
 c48:	f9 99       	sbic	0x1f, 1	; 31
 c4a:	fe cf       	rjmp	.-4      	; 0xc48 <eeprom_read_blraw+0x2>
 c4c:	06 c0       	rjmp	.+12     	; 0xc5a <eeprom_read_blraw+0x14>
 c4e:	f2 bd       	out	0x22, r31	; 34
 c50:	e1 bd       	out	0x21, r30	; 33
 c52:	f8 9a       	sbi	0x1f, 0	; 31
 c54:	31 96       	adiw	r30, 0x01	; 1
 c56:	00 b4       	in	r0, 0x20	; 32
 c58:	0d 92       	st	X+, r0
 c5a:	41 50       	subi	r20, 0x01	; 1
 c5c:	50 40       	sbci	r21, 0x00	; 0
 c5e:	b8 f7       	brcc	.-18     	; 0xc4e <eeprom_read_blraw+0x8>
 c60:	08 95       	ret

00000c62 <eeprom_write_block>:
 c62:	dc 01       	movw	r26, r24
 c64:	cb 01       	movw	r24, r22
 c66:	02 c0       	rjmp	.+4      	; 0xc6c <eeprom_write_block+0xa>
 c68:	2d 91       	ld	r18, X+
 c6a:	05 d0       	rcall	.+10     	; 0xc76 <eeprom_write_r18>
 c6c:	41 50       	subi	r20, 0x01	; 1
 c6e:	50 40       	sbci	r21, 0x00	; 0
 c70:	d8 f7       	brcc	.-10     	; 0xc68 <eeprom_write_block+0x6>
 c72:	08 95       	ret

00000c74 <eeprom_write_byte>:
 c74:	26 2f       	mov	r18, r22

00000c76 <eeprom_write_r18>:
 c76:	f9 99       	sbic	0x1f, 1	; 31
 c78:	fe cf       	rjmp	.-4      	; 0xc76 <eeprom_write_r18>
 c7a:	1f ba       	out	0x1f, r1	; 31
 c7c:	92 bd       	out	0x22, r25	; 34
 c7e:	81 bd       	out	0x21, r24	; 33
 c80:	20 bd       	out	0x20, r18	; 32
 c82:	0f b6       	in	r0, 0x3f	; 63
 c84:	f8 94       	cli
 c86:	fa 9a       	sbi	0x1f, 2	; 31
 c88:	f9 9a       	sbi	0x1f, 1	; 31
 c8a:	0f be       	out	0x3f, r0	; 63
 c8c:	01 96       	adiw	r24, 0x01	; 1
 c8e:	08 95       	ret

00000c90 <_exit>:
 c90:	f8 94       	cli

00000c92 <__stop_program>:
 c92:	ff cf       	rjmp	.-2      	; 0xc92 <__stop_program>
