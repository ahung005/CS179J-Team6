
testing.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800100  00000302  00000396  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000302  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000005  00800104  00800104  0000039a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000039a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b8  00000000  00000000  0000040c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e62  00000000  00000000  000004c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000969  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006f7  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002388  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000058c  00000000  00000000  0000251c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004f9  00000000  00000000  00002aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002fa1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	4e c0       	rjmp	.+156    	; 0xc6 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	49 c0       	rjmp	.+146    	; 0xc8 <__vector_13>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	42 c0       	rjmp	.+132    	; 0xc6 <__bad_interrupt>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e4       	ldi	r29, 0x40	; 64
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e2 e0       	ldi	r30, 0x02	; 2
  a0:	f3 e0       	ldi	r31, 0x03	; 3
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a4 30       	cpi	r26, 0x04	; 4
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a4 e0       	ldi	r26, 0x04	; 4
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a9 30       	cpi	r26, 0x09	; 9
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	c6 d0       	rcall	.+396    	; 0x250 <main>
  c4:	1c c1       	rjmp	.+568    	; 0x2fe <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_13>:
		while( !(UCSR0A & (1 << UDRE0)) );
		UDR0 = sendMe;
	}
	else {
		while( !(UCSR1A & (1 << UDRE1)) );
		UDR1 = sendMe;
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	8f 93       	push	r24
  d4:	9f 93       	push	r25
  d6:	af 93       	push	r26
  d8:	bf 93       	push	r27
  da:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <__data_end>
  de:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <__data_end+0x1>
  e2:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <__data_end+0x2>
  e6:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <__data_end+0x3>
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	a1 09       	sbc	r26, r1
  ee:	b1 09       	sbc	r27, r1
  f0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
  f4:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
  f8:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
  fc:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 100:	89 2b       	or	r24, r25
 102:	8a 2b       	or	r24, r26
 104:	8b 2b       	or	r24, r27
 106:	99 f4       	brne	.+38     	; 0x12e <__vector_13+0x66>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <TimerFlag>
 10e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
 112:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
 116:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
 11a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
 11e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__data_end>
 122:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <__data_end+0x1>
 126:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <__data_end+0x2>
 12a:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <__data_end+0x3>
 12e:	bf 91       	pop	r27
 130:	af 91       	pop	r26
 132:	9f 91       	pop	r25
 134:	8f 91       	pop	r24
 136:	0f 90       	pop	r0
 138:	0f be       	out	0x3f, r0	; 63
 13a:	0f 90       	pop	r0
 13c:	1f 90       	pop	r1
 13e:	18 95       	reti

00000140 <initUSART>:
 140:	81 30       	cpi	r24, 0x01	; 1
 142:	81 f0       	breq	.+32     	; 0x164 <initUSART+0x24>
 144:	e1 ec       	ldi	r30, 0xC1	; 193
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	80 81       	ld	r24, Z
 14a:	88 61       	ori	r24, 0x18	; 24
 14c:	80 83       	st	Z, r24
 14e:	e2 ec       	ldi	r30, 0xC2	; 194
 150:	f0 e0       	ldi	r31, 0x00	; 0
 152:	80 81       	ld	r24, Z
 154:	86 60       	ori	r24, 0x06	; 6
 156:	80 83       	st	Z, r24
 158:	83 e3       	ldi	r24, 0x33	; 51
 15a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 15e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 162:	08 95       	ret
 164:	e9 ec       	ldi	r30, 0xC9	; 201
 166:	f0 e0       	ldi	r31, 0x00	; 0
 168:	80 81       	ld	r24, Z
 16a:	88 61       	ori	r24, 0x18	; 24
 16c:	80 83       	st	Z, r24
 16e:	ea ec       	ldi	r30, 0xCA	; 202
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	86 60       	ori	r24, 0x06	; 6
 176:	80 83       	st	Z, r24
 178:	83 e3       	ldi	r24, 0x33	; 51
 17a:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
 17e:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
 182:	08 95       	ret

00000184 <USART_Receive>:
//Functionality - receives an 8-bit char value
//Parameter: usartNum specifies which USART is waiting to receive data
//Returns: Unsigned char data from the receive buffer
unsigned char USART_Receive(unsigned char usartNum)
{
	if (usartNum != 1) {
 184:	81 30       	cpi	r24, 0x01	; 1
 186:	41 f0       	breq	.+16     	; 0x198 <USART_Receive+0x14>
		while ( !(UCSR0A & (1 << RXC0)) ); // Wait for data to be received
 188:	e0 ec       	ldi	r30, 0xC0	; 192
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	88 23       	and	r24, r24
 190:	ec f7       	brge	.-6      	; 0x18c <USART_Receive+0x8>
		return UDR0; // Get and return received data from buffer
 192:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 196:	08 95       	ret
	}
	else {
		while ( !(UCSR1A & (1 << RXC1)) );
 198:	e8 ec       	ldi	r30, 0xC8	; 200
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	88 23       	and	r24, r24
 1a0:	ec f7       	brge	.-6      	; 0x19c <USART_Receive+0x18>
		return UDR1;
 1a2:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	}
}
 1a6:	08 95       	ret

000001a8 <delay_ms>:

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1a8:	18 16       	cp	r1, r24
 1aa:	19 06       	cpc	r1, r25
 1ac:	5c f0       	brlt	.+22     	; 0x1c4 <delay_ms+0x1c>
 1ae:	08 95       	ret
		for(j=0;j<775;j++) {
			asm("nop");
 1b0:	00 00       	nop
 1b2:	21 50       	subi	r18, 0x01	; 1
 1b4:	31 09       	sbc	r19, r1
/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
		for(j=0;j<775;j++) {
 1b6:	e1 f7       	brne	.-8      	; 0x1b0 <delay_ms+0x8>

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
	int i,j;
	for(i=0;i<miliSec;i++) {
 1b8:	4f 5f       	subi	r20, 0xFF	; 255
 1ba:	5f 4f       	sbci	r21, 0xFF	; 255
 1bc:	84 17       	cp	r24, r20
 1be:	95 07       	cpc	r25, r21
 1c0:	19 f4       	brne	.+6      	; 0x1c8 <delay_ms+0x20>
 1c2:	08 95       	ret
 1c4:	40 e0       	ldi	r20, 0x00	; 0
 1c6:	50 e0       	ldi	r21, 0x00	; 0
#define RS 6				// pin number of uC connected to pin 4 of LCD disp.
#define E 7					// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void delay_ms(int miliSec) { //for 8 Mhz crystal
 1c8:	27 e0       	ldi	r18, 0x07	; 7
 1ca:	33 e0       	ldi	r19, 0x03	; 3
 1cc:	f1 cf       	rjmp	.-30     	; 0x1b0 <delay_ms+0x8>

000001ce <LCD_WriteCommand>:
}

/*-------------------------------------------------------------------------*/

void LCD_WriteCommand (unsigned char Command) {
	CLR_BIT(CONTROL_BUS,RS);
 1ce:	5e 98       	cbi	0x0b, 6	; 11
	DATA_BUS = Command;
 1d0:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 1d2:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 1d4:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 1d6:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(2); // ClearScreen requires 1.52ms to execute
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	e5 cf       	rjmp	.-54     	; 0x1a8 <delay_ms>
 1de:	08 95       	ret

000001e0 <LCD_ClearScreen>:
}

void LCD_ClearScreen(void) {
	LCD_WriteCommand(0x01);
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	f5 cf       	rjmp	.-22     	; 0x1ce <LCD_WriteCommand>
 1e4:	08 95       	ret

000001e6 <LCD_init>:
}

void LCD_init(void) {
	delay_ms(100); //wait for 100 ms for LCD to power up
 1e6:	84 e6       	ldi	r24, 0x64	; 100
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	de df       	rcall	.-68     	; 0x1a8 <delay_ms>
	LCD_WriteCommand(0x38);
 1ec:	88 e3       	ldi	r24, 0x38	; 56
 1ee:	ef df       	rcall	.-34     	; 0x1ce <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
 1f0:	86 e0       	ldi	r24, 0x06	; 6
 1f2:	ed df       	rcall	.-38     	; 0x1ce <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
 1f4:	8f e0       	ldi	r24, 0x0F	; 15
 1f6:	eb df       	rcall	.-42     	; 0x1ce <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
 1f8:	81 e0       	ldi	r24, 0x01	; 1
 1fa:	e9 df       	rcall	.-46     	; 0x1ce <LCD_WriteCommand>
	delay_ms(10);						 
 1fc:	8a e0       	ldi	r24, 0x0A	; 10
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	d3 cf       	rjmp	.-90     	; 0x1a8 <delay_ms>
 202:	08 95       	ret

00000204 <LCD_WriteData>:
 204:	5e 9a       	sbi	0x0b, 6	; 11
}

void LCD_WriteData(unsigned char Data) {
	SET_BIT(CONTROL_BUS,RS);
	DATA_BUS = Data;
 206:	88 b9       	out	0x08, r24	; 8
	SET_BIT(CONTROL_BUS,E);
 208:	5f 9a       	sbi	0x0b, 7	; 11
	asm("nop");
 20a:	00 00       	nop
	CLR_BIT(CONTROL_BUS,E);
 20c:	5f 98       	cbi	0x0b, 7	; 11
	delay_ms(1);
 20e:	81 e0       	ldi	r24, 0x01	; 1
 210:	90 e0       	ldi	r25, 0x00	; 0
 212:	ca cf       	rjmp	.-108    	; 0x1a8 <delay_ms>
 214:	08 95       	ret

00000216 <LCD_Cursor>:
}

void LCD_Cursor(unsigned char column) {
	if ( column < 17 ) { // 16x2 LCD: column < 17; 16x1 LCD: column < 9
 216:	81 31       	cpi	r24, 0x11	; 17
 218:	18 f4       	brcc	.+6      	; 0x220 <LCD_Cursor+0xa>
		LCD_WriteCommand(0x80 + column - 1);
 21a:	81 58       	subi	r24, 0x81	; 129
 21c:	d8 cf       	rjmp	.-80     	; 0x1ce <LCD_WriteCommand>
 21e:	08 95       	ret
		} else { // 6x2 LCD: column - 9; 16x1 LCD: column - 1
		LCD_WriteCommand(0xB8 + column - 9);
 220:	81 55       	subi	r24, 0x51	; 81
 222:	d5 cf       	rjmp	.-86     	; 0x1ce <LCD_WriteCommand>
 224:	08 95       	ret

00000226 <LCD_DisplayString>:
	}
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
	//LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 22c:	fb 01       	movw	r30, r22
 22e:	90 81       	ld	r25, Z
 230:	99 23       	and	r25, r25
 232:	51 f0       	breq	.+20     	; 0x248 <LCD_DisplayString+0x22>
 234:	eb 01       	movw	r28, r22
		LCD_Cursor(c++);
 236:	11 e0       	ldi	r17, 0x01	; 1
 238:	18 0f       	add	r17, r24
 23a:	ed df       	rcall	.-38     	; 0x216 <LCD_Cursor>
		LCD_WriteData(*string++);
 23c:	89 91       	ld	r24, Y+
 23e:	e2 df       	rcall	.-60     	; 0x204 <LCD_WriteData>

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	//LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
		LCD_Cursor(c++);
 240:	81 2f       	mov	r24, r17
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
	//LCD_ClearScreen();
	unsigned char c = column;
	while(*string) {
 242:	98 81       	ld	r25, Y
 244:	91 11       	cpse	r25, r1
 246:	f7 cf       	rjmp	.-18     	; 0x236 <LCD_DisplayString+0x10>
		LCD_Cursor(c++);
		LCD_WriteData(*string++);
	}
}
 248:	df 91       	pop	r29
 24a:	cf 91       	pop	r28
 24c:	1f 91       	pop	r17
 24e:	08 95       	ret

00000250 <main>:
}

*/

int main(void)
{
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	cd b7       	in	r28, 0x3d	; 61
 256:	de b7       	in	r29, 0x3e	; 62
 258:	69 97       	sbiw	r28, 0x19	; 25
 25a:	0f b6       	in	r0, 0x3f	; 63
 25c:	f8 94       	cli
 25e:	de bf       	out	0x3e, r29	; 62
 260:	0f be       	out	0x3f, r0	; 63
 262:	cd bf       	out	0x3d, r28	; 61
	
	DDRA = 0x00;	PORTA = 0xFF;
 264:	11 b8       	out	0x01, r1	; 1
 266:	8f ef       	ldi	r24, 0xFF	; 255
 268:	82 b9       	out	0x02, r24	; 2
	DDRB = 0xFF;	PORTB = 0x00;
 26a:	84 b9       	out	0x04, r24	; 4
 26c:	15 b8       	out	0x05, r1	; 5
	DDRC = 0xFF;	PORTC = 0x00;
 26e:	87 b9       	out	0x07, r24	; 7
 270:	18 b8       	out	0x08, r1	; 8
	DDRD = 0xFE;	PORTD = 0x01;
 272:	8e ef       	ldi	r24, 0xFE	; 254
 274:	8a b9       	out	0x0a, r24	; 10
 276:	81 e0       	ldi	r24, 0x01	; 1
 278:	8b b9       	out	0x0b, r24	; 11
	
	LCD_init();
 27a:	b5 df       	rcall	.-150    	; 0x1e6 <LCD_init>
	LCD_ClearScreen();
 27c:	b1 df       	rcall	.-158    	; 0x1e0 <LCD_ClearScreen>
	initUSART(0);
 27e:	80 e0       	ldi	r24, 0x00	; 0
 280:	5f df       	rcall	.-322    	; 0x140 <initUSART>
 282:	fe 01       	movw	r30, r28
	//initUSART(1);
	
	//RFID variables
	char RFID[16];
	memset(RFID, 0, 16);
 284:	31 96       	adiw	r30, 0x01	; 1
 286:	80 e1       	ldi	r24, 0x10	; 16
 288:	df 01       	movw	r26, r30
 28a:	1d 92       	st	X+, r1
 28c:	8a 95       	dec	r24
 28e:	e9 f7       	brne	.-6      	; 0x28a <main+0x3a>
 290:	70 96       	adiw	r30, 0x10	; 16
	char outID[9];
	memset(outID, 0, 9);
 292:	89 e0       	ldi	r24, 0x09	; 9
 294:	df 01       	movw	r26, r30
 296:	1d 92       	st	X+, r1
 298:	8a 95       	dec	r24
 29a:	e9 f7       	brne	.-6      	; 0x296 <main+0x46>
 29c:	6e 01       	movw	r12, r28
 29e:	bd e0       	ldi	r27, 0x0D	; 13
 2a0:	cb 0e       	add	r12, r27
 2a2:	d1 1c       	adc	r13, r1
 2a4:	5e 01       	movw	r10, r28
 2a6:	eb e0       	ldi	r30, 0x0B	; 11
 2a8:	ae 0e       	add	r10, r30
 2aa:	b1 1c       	adc	r11, r1
 2ac:	ff ef       	ldi	r31, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ae:	23 ed       	ldi	r18, 0xD3	; 211
 2b0:	80 e3       	ldi	r24, 0x30	; 48
 2b2:	f1 50       	subi	r31, 0x01	; 1
 2b4:	20 40       	sbci	r18, 0x00	; 0
 2b6:	80 40       	sbci	r24, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x62>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x6c>
 2bc:	00 00       	nop
	
    /* Replace with your application code */
    while (1) 
    {
		_delay_ms(2000);
		LCD_ClearScreen();
 2be:	90 df       	rcall	.-224    	; 0x1e0 <LCD_ClearScreen>
 2c0:	de 01       	movw	r26, r28
 2c2:	11 96       	adiw	r26, 0x01	; 1
 2c4:	7d 01       	movw	r14, r26
 2c6:	8d 01       	movw	r16, r26
		*/
		
		
		// RFID scanner
		for (int i = 0; i < 12; i++) {
			RFID[i] = USART_Receive(0);
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	5c df       	rcall	.-328    	; 0x184 <USART_Receive>
 2cc:	f8 01       	movw	r30, r16
 2ce:	81 93       	st	Z+, r24
 2d0:	8f 01       	movw	r16, r30
 2d2:	ec 15       	cp	r30, r12
		}
		*/
		
		
		// RFID scanner
		for (int i = 0; i < 12; i++) {
 2d4:	fd 05       	cpc	r31, r13
 2d6:	c1 f7       	brne	.-16     	; 0x2c8 <main+0x78>
 2d8:	fe 01       	movw	r30, r28
 2da:	71 96       	adiw	r30, 0x11	; 17
 2dc:	d7 01       	movw	r26, r14
			RFID[i] = USART_Receive(0);
		}
		
		for (int i = 0; i < 10; i++) {
			outID[i] = RFID[i];
 2de:	8d 91       	ld	r24, X+
 2e0:	7d 01       	movw	r14, r26
 2e2:	81 93       	st	Z+, r24
 2e4:	aa 15       	cp	r26, r10
		// RFID scanner
		for (int i = 0; i < 12; i++) {
			RFID[i] = USART_Receive(0);
		}
		
		for (int i = 0; i < 10; i++) {
 2e6:	bb 05       	cpc	r27, r11
 2e8:	c9 f7       	brne	.-14     	; 0x2dc <main+0x8c>
 2ea:	ba e1       	ldi	r27, 0x1A	; 26
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ec:	ba 95       	dec	r27
 2ee:	f1 f7       	brne	.-4      	; 0x2ec <main+0x9c>
 2f0:	00 c0       	rjmp	.+0      	; 0x2f2 <main+0xa2>
			outID[i] = RFID[i];
		}
		_delay_us(10);
		
		LCD_DisplayString(0, outID);
 2f2:	be 01       	movw	r22, r28
 2f4:	6f 5e       	subi	r22, 0xEF	; 239
 2f6:	7f 4f       	sbci	r23, 0xFF	; 255
 2f8:	80 e0       	ldi	r24, 0x00	; 0
 2fa:	95 df       	rcall	.-214    	; 0x226 <LCD_DisplayString>
 2fc:	d7 cf       	rjmp	.-82     	; 0x2ac <main+0x5c>

000002fe <_exit>:
		make_template();  //makes the template with info in char_buffer1 & char_buffer2 and stores it in char_buffer1
		check_finger();   //checks for the finger authentication
		//    store(0);   //stores the scanned value to the given parametric location in flash library
		//    empty();    //empties the flash library
		*/
    }
 2fe:	f8 94       	cli

00000300 <__stop_program>:
 300:	ff cf       	rjmp	.-2      	; 0x300 <__stop_program>
